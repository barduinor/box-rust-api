/*
 * Box Platform API
 *
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct CollaborationAcceptanceRequirementsStatusTermsOfServiceRequirement {
    /// Whether or not the terms of service have been accepted.  The field is `null` when there is no terms of service required.
    #[serde(rename = "is_accepted", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub is_accepted: Option<Option<bool>>,
    #[serde(rename = "terms_of_service", skip_serializing_if = "Option::is_none")]
    pub terms_of_service: Option<Box<crate::models::CollaborationAcceptanceRequirementsStatusTermsOfServiceRequirementTermsOfService>>,
}

impl CollaborationAcceptanceRequirementsStatusTermsOfServiceRequirement {
    pub fn new() -> CollaborationAcceptanceRequirementsStatusTermsOfServiceRequirement {
        CollaborationAcceptanceRequirementsStatusTermsOfServiceRequirement {
            is_accepted: None,
            terms_of_service: None,
        }
    }
}


