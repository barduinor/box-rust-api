/*
 * Box Platform API
 *
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct PostMetadataTemplatesSchemaClassificationsRequest {
    /// The scope in which to create the classifications. This should be `enterprise` or `enterprise_{id}` where `id` is the unique ID of the enterprise.
    #[serde(rename = "scope")]
    pub scope: Scope,
    /// `securityClassification-6VMVochwUWo`
    #[serde(rename = "templateKey", skip_serializing_if = "Option::is_none")]
    pub template_key: Option<TemplateKey>,
    /// `Classification`
    #[serde(rename = "displayName")]
    pub display_name: DisplayName,
    /// `false`
    #[serde(rename = "hidden", skip_serializing_if = "Option::is_none")]
    pub hidden: Option<bool>,
    /// `false`
    #[serde(rename = "copyInstanceOnItemCopy", skip_serializing_if = "Option::is_none")]
    pub copy_instance_on_item_copy: Option<bool>,
    /// The classification template holds one field, which holds all the valid classification values.
    #[serde(rename = "fields", skip_serializing_if = "Option::is_none")]
    pub fields: Option<Vec<crate::models::PostMetadataTemplatesSchemaClassificationsRequestFieldsInner>>,
}

impl PostMetadataTemplatesSchemaClassificationsRequest {
    pub fn new(scope: Scope, display_name: DisplayName) -> PostMetadataTemplatesSchemaClassificationsRequest {
        PostMetadataTemplatesSchemaClassificationsRequest {
            scope,
            template_key: None,
            display_name,
            hidden: None,
            copy_instance_on_item_copy: None,
            fields: None,
        }
    }
}

/// The scope in which to create the classifications. This should be `enterprise` or `enterprise_{id}` where `id` is the unique ID of the enterprise.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Scope {
    #[serde(rename = "enterprise")]
    Enterprise,
}

impl Default for Scope {
    fn default() -> Scope {
        Self::Enterprise
    }
}
/// `securityClassification-6VMVochwUWo`
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TemplateKey {
    #[serde(rename = "securityClassification-6VMVochwUWo")]
    SecurityClassification6VmVochwUwo,
}

impl Default for TemplateKey {
    fn default() -> TemplateKey {
        Self::SecurityClassification6VmVochwUwo
    }
}
/// `Classification`
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DisplayName {
    #[serde(rename = "Classification")]
    Classification,
}

impl Default for DisplayName {
    fn default() -> DisplayName {
        Self::Classification
    }
}

