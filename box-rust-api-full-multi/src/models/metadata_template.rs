/*
 * Box Platform API
 *
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 * Generated by: https://openapi-generator.tech
 */

/// MetadataTemplate : A template for metadata that can be applied to files and folders



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct MetadataTemplate {
    /// The ID of the metadata template.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// `metadata_template`
    #[serde(rename = "type")]
    pub r#type: RHashType,
    /// The scope of the metadata template can either be `global` or `enterprise_*`. The `global` scope is used for templates that are available to any Box enterprise. The `enterprise_*` scope represents templates that have been created within a specific enterprise, where `*` will be the ID of that enterprise.
    #[serde(rename = "scope", skip_serializing_if = "Option::is_none")]
    pub scope: Option<String>,
    /// A unique identifier for the template. This identifier is unique across the `scope` of the enterprise to which the metadata template is being applied, yet is not necessarily unique across different enterprises.
    #[serde(rename = "templateKey", skip_serializing_if = "Option::is_none")]
    pub template_key: Option<String>,
    /// The display name of the template. This can be seen in the Box web app and mobile apps.
    #[serde(rename = "displayName", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,
    /// Defines if this template is visible in the Box web app UI, or if it is purely intended for usage through the API.
    #[serde(rename = "hidden", skip_serializing_if = "Option::is_none")]
    pub hidden: Option<bool>,
    /// An ordered list of template fields which are part of the template. Each field can be a regular text field, date field, number field, as well as a single or multi-select list.
    #[serde(rename = "fields", skip_serializing_if = "Option::is_none")]
    pub fields: Option<Vec<crate::models::MetadataTemplateFieldsInner>>,
    /// Whether or not to include the metadata when a file or folder is copied.
    #[serde(rename = "copyInstanceOnItemCopy", skip_serializing_if = "Option::is_none")]
    pub copy_instance_on_item_copy: Option<bool>,
}

impl MetadataTemplate {
    /// A template for metadata that can be applied to files and folders
    pub fn new(r#type: RHashType) -> MetadataTemplate {
        MetadataTemplate {
            id: None,
            r#type,
            scope: None,
            template_key: None,
            display_name: None,
            hidden: None,
            fields: None,
            copy_instance_on_item_copy: None,
        }
    }
}

/// `metadata_template`
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RHashType {
    #[serde(rename = "metadata_template")]
    MetadataTemplate,
}

impl Default for RHashType {
    fn default() -> RHashType {
        Self::MetadataTemplate
    }
}

