/*
 * Box Platform API
 *
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct SignRequestSignerAllOf {
    /// Set to `true` if the signer views the document
    #[serde(rename = "has_viewed_document", skip_serializing_if = "Option::is_none")]
    pub has_viewed_document: Option<bool>,
    #[serde(rename = "signer_decision", skip_serializing_if = "Option::is_none")]
    pub signer_decision: Option<Box<crate::models::SignRequestSignerAllOfSignerDecision>>,
    #[serde(rename = "inputs", skip_serializing_if = "Option::is_none")]
    pub inputs: Option<Vec<crate::models::SignRequestSignerInput>>,
    /// URL to direct a signer to for signing
    #[serde(rename = "embed_url", skip_serializing_if = "Option::is_none")]
    pub embed_url: Option<String>,
}

impl SignRequestSignerAllOf {
    pub fn new() -> SignRequestSignerAllOf {
        SignRequestSignerAllOf {
            has_viewed_document: None,
            signer_decision: None,
            inputs: None,
            embed_url: None,
        }
    }
}


