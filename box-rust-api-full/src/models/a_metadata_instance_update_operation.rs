/*
 * Box Platform API
 *
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 * Generated by: https://openapi-generator.tech
 */

/// AMetadataInstanceUpdateOperation : A [JSON-Patch](https://tools.ietf.org/html/rfc6902) operation for a change to make to the metadata instance.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct AMetadataInstanceUpdateOperation {
    /// The type of change to perform on the template. Some of these are hazardous as they will change existing templates.
    #[serde(rename = "op", skip_serializing_if = "Option::is_none")]
    pub op: Option<Op>,
    /// The location in the metadata JSON object to apply the changes to, in the format of a [JSON-Pointer](https://tools.ietf.org/html/rfc6901).  The path must always be prefixed with a `/` to represent the root of the template. The characters `~` and `/` are reserved characters and must be escaped in the key.
    #[serde(rename = "path", skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// The value to be set or tested.  Required for `add`, `replace`, and `test` operations. For `add`, if the value exists already the previous value will be overwritten by the new value. For `replace`, the value must exist before replacing.  For `test`, the existing value at the `path` location must match the specified value.
    #[serde(rename = "value", skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    /// The location in the metadata JSON object to move or copy a value from. Required for `move` or `copy` operations and must be in the format of a [JSON-Pointer](https://tools.ietf.org/html/rfc6901).
    #[serde(rename = "from", skip_serializing_if = "Option::is_none")]
    pub from: Option<String>,
}

impl AMetadataInstanceUpdateOperation {
    /// A [JSON-Patch](https://tools.ietf.org/html/rfc6902) operation for a change to make to the metadata instance.
    pub fn new() -> AMetadataInstanceUpdateOperation {
        AMetadataInstanceUpdateOperation {
            op: None,
            path: None,
            value: None,
            from: None,
        }
    }
}

/// The type of change to perform on the template. Some of these are hazardous as they will change existing templates.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Op {
    #[serde(rename = "add")]
    Add,
    #[serde(rename = "replace")]
    Replace,
    #[serde(rename = "remove")]
    Remove,
    #[serde(rename = "test")]
    Test,
    #[serde(rename = "move")]
    Move,
    #[serde(rename = "copy")]
    Copy,
}

impl Default for Op {
    fn default() -> Op {
        Self::Add
    }
}

