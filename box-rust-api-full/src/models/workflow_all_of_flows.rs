/*
 * Box Platform API
 *
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 * Generated by: https://openapi-generator.tech
 */

/// WorkflowAllOfFlows : A step in a Box Relay Workflow. Each flow contains a `Trigger` and a collection of Outcomes to perform once the conditions of a `Trigger` are met

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct WorkflowAllOfFlows {
    /// The identifier of the flow
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The flow's resource type
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<RHashType>,
    #[serde(rename = "trigger", skip_serializing_if = "Option::is_none")]
    pub trigger: Option<Box<serde_json::Value>>,
    //
    #[serde(rename = "outcomes", skip_serializing_if = "Option::is_none")]
    // pub outcomes: Option<Box<crate::models::Array>>,
    pub outcomes: Option<Box<serde_json::Value>>,
    //
    /// When this flow was created
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    #[serde(rename = "created_by", skip_serializing_if = "Option::is_none")]
    pub created_by: Option<Box<crate::models::UserBase>>,
}

impl WorkflowAllOfFlows {
    /// A step in a Box Relay Workflow. Each flow contains a `Trigger` and a collection of Outcomes to perform once the conditions of a `Trigger` are met
    pub fn new() -> WorkflowAllOfFlows {
        WorkflowAllOfFlows {
            id: None,
            r#type: None,
            trigger: None,
            outcomes: None,
            created_at: None,
            created_by: None,
        }
    }
}

/// The flow's resource type
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RHashType {
    #[serde(rename = "flow")]
    Flow,
}

impl Default for RHashType {
    fn default() -> RHashType {
        Self::Flow
    }
}
