/*
 * Box Platform API
 *
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 * Generated by: https://openapi-generator.tech
 */

/// WebhookInvocation : The event that is sent to a webhook address when an event happens.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct WebhookInvocation {
    /// The unique identifier for this webhook invocation
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// `webhook_event`
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<RHashType>,
    #[serde(rename = "webhook", skip_serializing_if = "Option::is_none")]
    pub webhook: Option<Box<crate::models::WebhookInvocationWebhook>>,
    #[serde(rename = "created_by", skip_serializing_if = "Option::is_none")]
    pub created_by: Option<Box<crate::models::WebhookInvocationCreatedBy>>,
    /// A timestamp identifying the time that the webhook event was triggered.
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    #[serde(rename = "trigger", skip_serializing_if = "Option::is_none")]
    pub trigger: Option<Box<String>>,
    #[serde(rename = "source", skip_serializing_if = "Option::is_none")]
    pub source: Option<Box<crate::models::WebhookInvocationSource>>,
}

impl WebhookInvocation {
    /// The event that is sent to a webhook address when an event happens.
    pub fn new() -> WebhookInvocation {
        WebhookInvocation {
            id: None,
            r#type: None,
            webhook: None,
            created_by: None,
            created_at: None,
            trigger: None,
            source: None,
        }
    }
}

/// `webhook_event`
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RHashType {
    #[serde(rename = "webhook_event")]
    WebhookEvent,
}

impl Default for RHashType {
    fn default() -> RHashType {
        Self::WebhookEvent
    }
}

