/*
 * Box Platform API
 *
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct CollaborationAcceptanceRequirementsStatusTwoFactorAuthenticationRequirement {
    /// Whether or not the enterprise that owns the content requires two-factor authentication to be enabled in order to collaborate on the content.
    #[serde(rename = "enterprise_has_two_factor_auth_enabled", skip_serializing_if = "Option::is_none")]
    pub enterprise_has_two_factor_auth_enabled: Option<bool>,
    /// Whether or not the user has two-factor authentication enabled. The field is `null` when two-factor authentication is not required.
    #[serde(rename = "user_has_two_factor_authentication_enabled", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub user_has_two_factor_authentication_enabled: Option<Option<bool>>,
}

impl CollaborationAcceptanceRequirementsStatusTwoFactorAuthenticationRequirement {
    pub fn new() -> CollaborationAcceptanceRequirementsStatusTwoFactorAuthenticationRequirement {
        CollaborationAcceptanceRequirementsStatusTwoFactorAuthenticationRequirement {
            enterprise_has_two_factor_auth_enabled: None,
            user_has_two_factor_authentication_enabled: None,
        }
    }
}


