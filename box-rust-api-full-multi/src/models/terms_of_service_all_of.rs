/*
 * Box Platform API
 *
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct TermsOfServiceAllOf {
    /// Whether these terms are enabled or not
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
    #[serde(rename = "enterprise", skip_serializing_if = "Option::is_none")]
    pub enterprise: Option<Box<crate::models::TermsOfServiceAllOfEnterprise>>,
    /// Whether to apply these terms to managed users or external users
    #[serde(rename = "tos_type", skip_serializing_if = "Option::is_none")]
    pub tos_type: Option<TosType>,
    /// The text for your terms and conditions. This text could be empty if the `status` is set to `disabled`.
    #[serde(rename = "text", skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
    /// When the legal item was created
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    /// When the legal item was modified.
    #[serde(rename = "modified_at", skip_serializing_if = "Option::is_none")]
    pub modified_at: Option<String>,
}

impl TermsOfServiceAllOf {
    pub fn new() -> TermsOfServiceAllOf {
        TermsOfServiceAllOf {
            status: None,
            enterprise: None,
            tos_type: None,
            text: None,
            created_at: None,
            modified_at: None,
        }
    }
}

/// Whether these terms are enabled or not
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for Status {
    fn default() -> Status {
        Self::Enabled
    }
}
/// Whether to apply these terms to managed users or external users
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TosType {
    #[serde(rename = "managed")]
    Managed,
    #[serde(rename = "external")]
    External,
}

impl Default for TosType {
    fn default() -> TosType {
        Self::Managed
    }
}

