/*
 * Box Platform API
 *
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 * Generated by: https://openapi-generator.tech
 */

/// CollaborationAllowlistExemptTarget : The user that is exempt from any of the restrictions imposed by the list of allowed collaboration domains for this enterprise.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct CollaborationAllowlistExemptTarget {
    /// The unique identifier for this exemption
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// `collaboration_whitelist`
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<RHashType>,
    #[serde(rename = "enterprise", skip_serializing_if = "Option::is_none")]
    pub enterprise: Option<Box<crate::models::CollaborationAllowlistExemptTargetEnterprise>>,
    #[serde(rename = "user", skip_serializing_if = "Option::is_none")]
    pub user: Option<Box<crate::models::CollaborationAllowlistExemptTargetUser>>,
    /// The time the entry was created
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    /// The time the entry was modified
    #[serde(rename = "modified_at", skip_serializing_if = "Option::is_none")]
    pub modified_at: Option<String>,
}

impl CollaborationAllowlistExemptTarget {
    /// The user that is exempt from any of the restrictions imposed by the list of allowed collaboration domains for this enterprise.
    pub fn new() -> CollaborationAllowlistExemptTarget {
        CollaborationAllowlistExemptTarget {
            id: None,
            r#type: None,
            enterprise: None,
            user: None,
            created_at: None,
            modified_at: None,
        }
    }
}

/// `collaboration_whitelist`
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RHashType {
    #[serde(rename = "collaboration_whitelist")]
    CollaborationWhitelist,
}

impl Default for RHashType {
    fn default() -> RHashType {
        Self::CollaborationWhitelist
    }
}

