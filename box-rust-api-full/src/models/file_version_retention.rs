/*
 * Box Platform API
 *
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 * Generated by: https://openapi-generator.tech
 */

/// FileVersionRetention : A retention policy blocks permanent deletion of content for a specified amount of time. Admins can apply policies to specified folders, or an entire enterprise. A file version retention is a  record for a retained file version. To use this feature, you must  have the manage retention policies scope enabled for your API key via  your application management console. For more information about retention policies, please visit our help documentation



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct FileVersionRetention {
    /// The unique identifier for this file version retention.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// `file_version_retention`
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<RHashType>,
    #[serde(rename = "file_version", skip_serializing_if = "Option::is_none")]
    pub file_version: Option<Box<crate::models::FileVersionRetentionFileVersion>>,
    #[serde(rename = "file", skip_serializing_if = "Option::is_none")]
    pub file: Option<Box<crate::models::FileVersionRetentionFile>>,
    /// When this file version retention object was created
    #[serde(rename = "applied_at", skip_serializing_if = "Option::is_none")]
    pub applied_at: Option<String>,
    /// When the retention expires on this file version retention
    #[serde(rename = "disposition_at", skip_serializing_if = "Option::is_none")]
    pub disposition_at: Option<String>,
    #[serde(rename = "winning_retention_policy", skip_serializing_if = "Option::is_none")]
    pub winning_retention_policy: Option<Box<crate::models::FileVersionRetentionWinningRetentionPolicy>>,
}

impl FileVersionRetention {
    /// A retention policy blocks permanent deletion of content for a specified amount of time. Admins can apply policies to specified folders, or an entire enterprise. A file version retention is a  record for a retained file version. To use this feature, you must  have the manage retention policies scope enabled for your API key via  your application management console. For more information about retention policies, please visit our help documentation
    pub fn new() -> FileVersionRetention {
        FileVersionRetention {
            id: None,
            r#type: None,
            file_version: None,
            file: None,
            applied_at: None,
            disposition_at: None,
            winning_retention_policy: None,
        }
    }
}

/// `file_version_retention`
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RHashType {
    #[serde(rename = "file_version_retention")]
    FileVersionRetention,
}

impl Default for RHashType {
    fn default() -> RHashType {
        Self::FileVersionRetention
    }
}

