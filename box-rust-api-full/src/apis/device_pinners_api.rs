/*
 * Box Platform API
 *
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method [`delete_device_pinners_id`]
#[derive(Clone, Debug, Default)]
pub struct DeleteDevicePinnersIdParams {
    /// The ID of the device pin
    pub device_pinner_id: String
}

/// struct for passing parameters to the method [`get_device_pinners_id`]
#[derive(Clone, Debug, Default)]
pub struct GetDevicePinnersIdParams {
    /// The ID of the device pin
    pub device_pinner_id: String
}

/// struct for passing parameters to the method [`get_enterprises_id_device_pinners`]
#[derive(Clone, Debug, Default)]
pub struct GetEnterprisesIdDevicePinnersParams {
    /// The ID of the enterprise
    pub enterprise_id: String,
    /// Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination.  This requires `usemarker` to be set to `true`.
    pub marker: Option<String>,
    /// The maximum number of items to return per page.
    pub limit: Option<i64>,
    /// The direction to sort results in. This can be either in alphabetical ascending (`ASC`) or descending (`DESC`) order.
    pub direction: Option<String>
}


/// struct for typed errors of method [`delete_device_pinners_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteDevicePinnersIdError {
    DefaultResponse(crate::models::ClientError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_device_pinners_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetDevicePinnersIdError {
    DefaultResponse(crate::models::ClientError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_enterprises_id_device_pinners`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetEnterprisesIdDevicePinnersError {
    DefaultResponse(crate::models::ClientError),
    UnknownValue(serde_json::Value),
}


/// Deletes an individual device pin.
pub async fn delete_device_pinners_id(configuration: &configuration::Configuration, params: DeleteDevicePinnersIdParams) -> Result<(), Error<DeleteDevicePinnersIdError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let device_pinner_id = params.device_pinner_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/device_pinners/{device_pinner_id}", local_var_configuration.base_path, device_pinner_id=crate::apis::urlencode(device_pinner_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DeleteDevicePinnersIdError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Retrieves information about an individual device pin.
pub async fn get_device_pinners_id(configuration: &configuration::Configuration, params: GetDevicePinnersIdParams) -> Result<crate::models::DevicePinner, Error<GetDevicePinnersIdError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let device_pinner_id = params.device_pinner_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/device_pinners/{device_pinner_id}", local_var_configuration.base_path, device_pinner_id=crate::apis::urlencode(device_pinner_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetDevicePinnersIdError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Retrieves all the device pins within an enterprise.  The user must have admin privileges, and the application needs the \"manage enterprise\" scope to make this call.
pub async fn get_enterprises_id_device_pinners(configuration: &configuration::Configuration, params: GetEnterprisesIdDevicePinnersParams) -> Result<crate::models::DevicePinners, Error<GetEnterprisesIdDevicePinnersError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let enterprise_id = params.enterprise_id;
    let marker = params.marker;
    let limit = params.limit;
    let direction = params.direction;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/enterprises/{enterprise_id}/device_pinners", local_var_configuration.base_path, enterprise_id=crate::apis::urlencode(enterprise_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = marker {
        local_var_req_builder = local_var_req_builder.query(&[("marker", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = direction {
        local_var_req_builder = local_var_req_builder.query(&[("direction", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetEnterprisesIdDevicePinnersError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

