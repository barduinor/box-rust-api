/*
 * Box Platform API
 *
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 * Generated by: https://openapi-generator.tech
 */

/// IntegrationMappingPartnerItemSlack : The schema for an integration mapping mapped item object for type Slack



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct IntegrationMappingPartnerItemSlack {
    /// Type of the mapped item referenced in `id`
    #[serde(rename = "type")]
    pub r#type: RHashType,
    /// ID of the mapped item (of type referenced in `type`)
    #[serde(rename = "id")]
    pub id: String,
    /// ID of the Slack workspace with which the item is associated
    #[serde(rename = "slack_workspace_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub slack_workspace_id: Option<Option<String>>,
    /// ID of the Slack organization with which the item is associated
    #[serde(rename = "slack_org_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub slack_org_id: Option<Option<String>>,
}

impl IntegrationMappingPartnerItemSlack {
    /// The schema for an integration mapping mapped item object for type Slack
    pub fn new(r#type: RHashType, id: String) -> IntegrationMappingPartnerItemSlack {
        IntegrationMappingPartnerItemSlack {
            r#type,
            id,
            slack_workspace_id: None,
            slack_org_id: None,
        }
    }
}

/// Type of the mapped item referenced in `id`
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RHashType {
    #[serde(rename = "channel")]
    Channel,
}

impl Default for RHashType {
    fn default() -> RHashType {
        Self::Channel
    }
}

