/*
 * Box Platform API
 *
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 * Generated by: https://openapi-generator.tech
 */

/// ZipDownloadNameConflictsInnerInner : A file or folder for which a conflict was encountered, This object provides the type and identifier of the original item, as well as a mapping between its original name and it's new name as it will appear in the archive.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ZipDownloadNameConflictsInnerInner {
    /// The identifier of the item
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The type of this item
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<RHashType>,
    /// The original name of this item
    #[serde(rename = "original_name", skip_serializing_if = "Option::is_none")]
    pub original_name: Option<String>,
    /// The new name of this item as it will appear in the downloaded `zip` archive.
    #[serde(rename = "download_name", skip_serializing_if = "Option::is_none")]
    pub download_name: Option<String>,
}

impl ZipDownloadNameConflictsInnerInner {
    /// A file or folder for which a conflict was encountered, This object provides the type and identifier of the original item, as well as a mapping between its original name and it's new name as it will appear in the archive.
    pub fn new() -> ZipDownloadNameConflictsInnerInner {
        ZipDownloadNameConflictsInnerInner {
            id: None,
            r#type: None,
            original_name: None,
            download_name: None,
        }
    }
}

/// The type of this item
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RHashType {
    #[serde(rename = "file")]
    File,
    #[serde(rename = "folder")]
    Folder,
}

impl Default for RHashType {
    fn default() -> RHashType {
        Self::File
    }
}

