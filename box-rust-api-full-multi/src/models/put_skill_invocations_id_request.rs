/*
 * Box Platform API
 *
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct PutSkillInvocationsIdRequest {
    /// Defines the status of this invocation. Set this to `success` when setting Skill cards.
    #[serde(rename = "status")]
    pub status: Status,
    #[serde(rename = "metadata")]
    pub metadata: Box<crate::models::PutSkillInvocationsIdRequestMetadata>,
    #[serde(rename = "file")]
    pub file: Box<crate::models::PutSkillInvocationsIdRequestFile>,
    #[serde(rename = "file_version", skip_serializing_if = "Option::is_none")]
    pub file_version: Option<Box<crate::models::PutSkillInvocationsIdRequestFileVersion>>,
    #[serde(rename = "usage", skip_serializing_if = "Option::is_none")]
    pub usage: Option<Box<crate::models::PutSkillInvocationsIdRequestUsage>>,
}

impl PutSkillInvocationsIdRequest {
    pub fn new(status: Status, metadata: crate::models::PutSkillInvocationsIdRequestMetadata, file: crate::models::PutSkillInvocationsIdRequestFile) -> PutSkillInvocationsIdRequest {
        PutSkillInvocationsIdRequest {
            status,
            metadata: Box::new(metadata),
            file: Box::new(file),
            file_version: None,
            usage: None,
        }
    }
}

/// Defines the status of this invocation. Set this to `success` when setting Skill cards.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "invoked")]
    Invoked,
    #[serde(rename = "processing")]
    Processing,
    #[serde(rename = "success")]
    Success,
    #[serde(rename = "transient_failure")]
    TransientFailure,
    #[serde(rename = "permanent_failure")]
    PermanentFailure,
}

impl Default for Status {
    fn default() -> Status {
        Self::Invoked
    }
}

