/*
 * Box Platform API
 *
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct PutGroupMembershipsIdRequest {
    /// The role of the user in the group.
    #[serde(rename = "role", skip_serializing_if = "Option::is_none")]
    pub role: Option<Role>,
    /// Custom configuration for the permissions an admin if a group will receive. This option has no effect on members with a role of `member`.  Setting these permissions overwrites the default access levels of an admin.  Specifying a value of \"null\" for this object will disable all configurable permissions. Specifying permissions will set them accordingly, omitted permissions will be enabled by default.
    #[serde(rename = "configurable_permissions", skip_serializing_if = "Option::is_none")]
    pub configurable_permissions: Option<::std::collections::HashMap<String, bool>>,
}

impl PutGroupMembershipsIdRequest {
    pub fn new() -> PutGroupMembershipsIdRequest {
        PutGroupMembershipsIdRequest {
            role: None,
            configurable_permissions: None,
        }
    }
}

/// The role of the user in the group.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Role {
    #[serde(rename = "member")]
    Member,
    #[serde(rename = "admin")]
    Admin,
}

impl Default for Role {
    fn default() -> Role {
        Self::Member
    }
}

