/*
 * Box Platform API
 *
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 * Generated by: https://openapi-generator.tech
 */

/// TrashWebLink : Represents a trashed web link.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct TrashWebLink {
    /// `web_link`
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<RHashType>,
    /// The unique identifier for this web link
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "sequence_id", skip_serializing_if = "Option::is_none")]
    pub sequence_id: Option<Box<String>>,
    /// The entity tag of this web link. Used with `If-Match` headers.
    #[serde(rename = "etag", skip_serializing_if = "Option::is_none")]
    pub etag: Option<String>,
    /// The name of the web link
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The URL this web link points to
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(rename = "parent", skip_serializing_if = "Option::is_none")]
    pub parent: Option<Box<crate::models::TrashWebLinkParent>>,
    /// The description accompanying the web link. This is visible within the Box web application.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "path_collection", skip_serializing_if = "Option::is_none")]
    pub path_collection: Option<Box<crate::models::TrashWebLinkPathCollection>>,
    /// When this file was created on Boxâ€™s servers.
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    /// When this file was last updated on the Box servers.
    #[serde(rename = "modified_at", skip_serializing_if = "Option::is_none")]
    pub modified_at: Option<String>,
    /// When this file was last moved to the trash.
    #[serde(rename = "trashed_at", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub trashed_at: Option<Option<String>>,
    /// When this file will be permanently deleted.
    #[serde(rename = "purged_at", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub purged_at: Option<Option<String>>,
    #[serde(rename = "created_by", skip_serializing_if = "Option::is_none")]
    pub created_by: Option<Box<crate::models::TrashWebLinkCreatedBy>>,
    #[serde(rename = "modified_by", skip_serializing_if = "Option::is_none")]
    pub modified_by: Option<Box<crate::models::TrashWebLinkModifiedBy>>,
    #[serde(rename = "owned_by", skip_serializing_if = "Option::is_none")]
    pub owned_by: Option<Box<crate::models::TrashWebLinkOwnedBy>>,
    /// The shared link for this bookmark. This will be `null` if a bookmark has been trashed, since the link will no longer be active.
    #[serde(rename = "shared_link", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub shared_link: Option<Option<String>>,
    /// Whether this item is deleted or not. Values include `active`, `trashed` if the file has been moved to the trash, and `deleted` if the file has been permanently deleted
    #[serde(rename = "item_status", skip_serializing_if = "Option::is_none")]
    pub item_status: Option<ItemStatus>,
}

impl TrashWebLink {
    /// Represents a trashed web link.
    pub fn new() -> TrashWebLink {
        TrashWebLink {
            r#type: None,
            id: None,
            sequence_id: None,
            etag: None,
            name: None,
            url: None,
            parent: None,
            description: None,
            path_collection: None,
            created_at: None,
            modified_at: None,
            trashed_at: None,
            purged_at: None,
            created_by: None,
            modified_by: None,
            owned_by: None,
            shared_link: None,
            item_status: None,
        }
    }
}

/// `web_link`
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RHashType {
    #[serde(rename = "web_link")]
    WebLink,
}

impl Default for RHashType {
    fn default() -> RHashType {
        Self::WebLink
    }
}
/// Whether this item is deleted or not. Values include `active`, `trashed` if the file has been moved to the trash, and `deleted` if the file has been permanently deleted
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ItemStatus {
    #[serde(rename = "active")]
    Active,
    #[serde(rename = "trashed")]
    Trashed,
    #[serde(rename = "deleted")]
    Deleted,
}

impl Default for ItemStatus {
    fn default() -> ItemStatus {
        Self::Active
    }
}

