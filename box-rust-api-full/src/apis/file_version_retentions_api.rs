/*
 * Box Platform API
 *
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method [`get_file_version_retentions`]
#[derive(Clone, Debug, Default)]
pub struct GetFileVersionRetentionsParams {
    /// Filters results by files with this ID.
    pub file_id: Option<String>,
    /// Filters results by file versions with this ID.
    pub file_version_id: Option<String>,
    /// Filters results by the retention policy with this ID.
    pub policy_id: Option<String>,
    /// Filters results by the retention policy with this disposition action.
    pub disposition_action: Option<String>,
    /// Filters results by files that will have their disposition come into effect before this date.
    pub disposition_before: Option<String>,
    /// Filters results by files that will have their disposition come into effect after this date.
    pub disposition_after: Option<String>,
    /// The maximum number of items to return per page.
    pub limit: Option<i64>,
    /// Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination.  This requires `usemarker` to be set to `true`.
    pub marker: Option<String>
}

/// struct for passing parameters to the method [`get_file_version_retentions_id`]
#[derive(Clone, Debug, Default)]
pub struct GetFileVersionRetentionsIdParams {
    /// The ID of the file version retention
    pub file_version_retention_id: String
}


/// struct for typed errors of method [`get_file_version_retentions`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetFileVersionRetentionsError {
    DefaultResponse(crate::models::ClientError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_file_version_retentions_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetFileVersionRetentionsIdError {
    DefaultResponse(crate::models::ClientError),
    UnknownValue(serde_json::Value),
}


/// Retrieves all file version retentions for the given enterprise.
pub async fn get_file_version_retentions(configuration: &configuration::Configuration, params: GetFileVersionRetentionsParams) -> Result<crate::models::FileVersionRetentions, Error<GetFileVersionRetentionsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let file_id = params.file_id;
    let file_version_id = params.file_version_id;
    let policy_id = params.policy_id;
    let disposition_action = params.disposition_action;
    let disposition_before = params.disposition_before;
    let disposition_after = params.disposition_after;
    let limit = params.limit;
    let marker = params.marker;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/file_version_retentions", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = file_id {
        local_var_req_builder = local_var_req_builder.query(&[("file_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = file_version_id {
        local_var_req_builder = local_var_req_builder.query(&[("file_version_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = policy_id {
        local_var_req_builder = local_var_req_builder.query(&[("policy_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = disposition_action {
        local_var_req_builder = local_var_req_builder.query(&[("disposition_action", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = disposition_before {
        local_var_req_builder = local_var_req_builder.query(&[("disposition_before", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = disposition_after {
        local_var_req_builder = local_var_req_builder.query(&[("disposition_after", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = marker {
        local_var_req_builder = local_var_req_builder.query(&[("marker", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetFileVersionRetentionsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns information about a file version retention.
pub async fn get_file_version_retentions_id(configuration: &configuration::Configuration, params: GetFileVersionRetentionsIdParams) -> Result<crate::models::FileVersionRetention, Error<GetFileVersionRetentionsIdError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let file_version_retention_id = params.file_version_retention_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/file_version_retentions/{file_version_retention_id}", local_var_configuration.base_path, file_version_retention_id=crate::apis::urlencode(file_version_retention_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetFileVersionRetentionsIdError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

