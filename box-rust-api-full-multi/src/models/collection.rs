/*
 * Box Platform API
 *
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 * Generated by: https://openapi-generator.tech
 */

/// Collection : A collection of items, including files and folders.  Currently, the only collection available is the `favorites` collection.  The contents of a collection can be explored in a similar way to which the contents of a folder is explored.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Collection {
    /// The unique identifier for this collection.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// `collection`
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<RHashType>,
    /// The name of the collection.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<Name>,
    /// The type of the collection. This is used to determine the proper visual treatment for collections.
    #[serde(rename = "collection_type", skip_serializing_if = "Option::is_none")]
    pub collection_type: Option<CollectionType>,
}

impl Collection {
    /// A collection of items, including files and folders.  Currently, the only collection available is the `favorites` collection.  The contents of a collection can be explored in a similar way to which the contents of a folder is explored.
    pub fn new() -> Collection {
        Collection {
            id: None,
            r#type: None,
            name: None,
            collection_type: None,
        }
    }
}

/// `collection`
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RHashType {
    #[serde(rename = "collection")]
    Collection,
}

impl Default for RHashType {
    fn default() -> RHashType {
        Self::Collection
    }
}
/// The name of the collection.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Name {
    #[serde(rename = "Favorites")]
    Favorites,
}

impl Default for Name {
    fn default() -> Name {
        Self::Favorites
    }
}
/// The type of the collection. This is used to determine the proper visual treatment for collections.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum CollectionType {
    #[serde(rename = "favorites")]
    Favorites,
}

impl Default for CollectionType {
    fn default() -> CollectionType {
        Self::Favorites
    }
}

