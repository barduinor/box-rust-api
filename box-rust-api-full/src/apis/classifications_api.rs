/*
 * Box Platform API
 *
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method [`post_metadata_templates_schema_classifications`]
#[derive(Clone, Debug, Default)]
pub struct PostMetadataTemplatesSchemaClassificationsParams {
    pub post_metadata_templates_schema_classifications_request: Option<crate::models::PostMetadataTemplatesSchemaClassificationsRequest>
}

/// struct for passing parameters to the method [`put_metadata_templates_enterprise_security_classification6_vm_vochw_uwo_schema_add`]
#[derive(Clone, Debug, Default)]
pub struct PutMetadataTemplatesEnterpriseSecurityClassification6VmVochwUwoSchemaAddParams {
    pub put_metadata_templates_enterprise_security_classification_6_vm_vochw_uwo_schema_add_request_inner: Option<Vec<crate::models::PutMetadataTemplatesEnterpriseSecurityClassification6VmVochwUwoSchemaAddRequestInner>>
}

/// struct for passing parameters to the method [`put_metadata_templates_enterprise_security_classification6_vm_vochw_uwo_schema_delete`]
#[derive(Clone, Debug, Default)]
pub struct PutMetadataTemplatesEnterpriseSecurityClassification6VmVochwUwoSchemaDeleteParams {
    pub put_metadata_templates_enterprise_security_classification_6_vm_vochw_uwo_schema_delete_request_inner: Option<Vec<crate::models::PutMetadataTemplatesEnterpriseSecurityClassification6VmVochwUwoSchemaDeleteRequestInner>>
}

/// struct for passing parameters to the method [`put_metadata_templates_enterprise_security_classification6_vm_vochw_uwo_schema_update`]
#[derive(Clone, Debug, Default)]
pub struct PutMetadataTemplatesEnterpriseSecurityClassification6VmVochwUwoSchemaUpdateParams {
    pub put_metadata_templates_enterprise_security_classification_6_vm_vochw_uwo_schema_update_request_inner: Option<Vec<crate::models::PutMetadataTemplatesEnterpriseSecurityClassification6VmVochwUwoSchemaUpdateRequestInner>>
}


/// struct for typed errors of method [`delete_metadata_templates_enterprise_security_classification6_vm_vochw_uwo_schema`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteMetadataTemplatesEnterpriseSecurityClassification6VmVochwUwoSchemaError {
    DefaultResponse(crate::models::ClientError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_metadata_templates_enterprise_security_classification6_vm_vochw_uwo_schema`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetMetadataTemplatesEnterpriseSecurityClassification6VmVochwUwoSchemaError {
    Status400(crate::models::ClientError),
    Status404(crate::models::ClientError),
    DefaultResponse(crate::models::ClientError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`post_metadata_templates_schema_classifications`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PostMetadataTemplatesSchemaClassificationsError {
    Status400(crate::models::ClientError),
    Status404(crate::models::ClientError),
    DefaultResponse(crate::models::ClientError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`put_metadata_templates_enterprise_security_classification6_vm_vochw_uwo_schema_add`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PutMetadataTemplatesEnterpriseSecurityClassification6VmVochwUwoSchemaAddError {
    Status400(crate::models::ClientError),
    Status404(crate::models::ClientError),
    DefaultResponse(crate::models::ClientError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`put_metadata_templates_enterprise_security_classification6_vm_vochw_uwo_schema_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PutMetadataTemplatesEnterpriseSecurityClassification6VmVochwUwoSchemaDeleteError {
    Status400(crate::models::ClientError),
    Status404(crate::models::ClientError),
    DefaultResponse(crate::models::ClientError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`put_metadata_templates_enterprise_security_classification6_vm_vochw_uwo_schema_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PutMetadataTemplatesEnterpriseSecurityClassification6VmVochwUwoSchemaUpdateError {
    Status400(crate::models::ClientError),
    Status404(crate::models::ClientError),
    DefaultResponse(crate::models::ClientError),
    UnknownValue(serde_json::Value),
}


/// Delete all classifications by deleting the classification metadata template.
pub async fn delete_metadata_templates_enterprise_security_classification6_vm_vochw_uwo_schema(configuration: &configuration::Configuration) -> Result<(), Error<DeleteMetadataTemplatesEnterpriseSecurityClassification6VmVochwUwoSchemaError>> {
    let local_var_configuration = configuration;

    // unbox the parameters


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/metadata_templates/enterprise/securityClassification-6VMVochwUWo/schema", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DeleteMetadataTemplatesEnterpriseSecurityClassification6VmVochwUwoSchemaError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Retrieves the classification metadata template and lists all the classifications available to this enterprise.  This API can also be called by including the enterprise ID in the URL explicitly, for example `/metadata_templates/enterprise_12345/securityClassification-6VMVochwUWo/schema`.
pub async fn get_metadata_templates_enterprise_security_classification6_vm_vochw_uwo_schema(configuration: &configuration::Configuration) -> Result<crate::models::ClassificationTemplate, Error<GetMetadataTemplatesEnterpriseSecurityClassification6VmVochwUwoSchemaError>> {
    let local_var_configuration = configuration;

    // unbox the parameters


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/metadata_templates/enterprise/securityClassification-6VMVochwUWo/schema", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetMetadataTemplatesEnterpriseSecurityClassification6VmVochwUwoSchemaError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// When an enterprise does not yet have any classifications, this API call initializes the classification template with an initial set of classifications.  If an enterprise already has a classification, the template will already exist and instead an API call should be made to add additional classifications.
pub async fn post_metadata_templates_schema_classifications(configuration: &configuration::Configuration, params: PostMetadataTemplatesSchemaClassificationsParams) -> Result<crate::models::ClassificationTemplate, Error<PostMetadataTemplatesSchemaClassificationsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let post_metadata_templates_schema_classifications_request = params.post_metadata_templates_schema_classifications_request;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/metadata_templates/schema#classifications", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&post_metadata_templates_schema_classifications_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PostMetadataTemplatesSchemaClassificationsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Adds one or more new classifications to the list of classifications available to the enterprise.  This API can also be called by including the enterprise ID in the URL explicitly, for example `/metadata_templates/enterprise_12345/securityClassification-6VMVochwUWo/schema`.
pub async fn put_metadata_templates_enterprise_security_classification6_vm_vochw_uwo_schema_add(configuration: &configuration::Configuration, params: PutMetadataTemplatesEnterpriseSecurityClassification6VmVochwUwoSchemaAddParams) -> Result<crate::models::ClassificationTemplate, Error<PutMetadataTemplatesEnterpriseSecurityClassification6VmVochwUwoSchemaAddError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let put_metadata_templates_enterprise_security_classification_6_vm_vochw_uwo_schema_add_request_inner = params.put_metadata_templates_enterprise_security_classification_6_vm_vochw_uwo_schema_add_request_inner;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/metadata_templates/enterprise/securityClassification-6VMVochwUWo/schema#add", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&put_metadata_templates_enterprise_security_classification_6_vm_vochw_uwo_schema_add_request_inner);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PutMetadataTemplatesEnterpriseSecurityClassification6VmVochwUwoSchemaAddError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Removes a classification from the list of classifications available to the enterprise.  This API can also be called by including the enterprise ID in the URL explicitly, for example `/metadata_templates/enterprise_12345/securityClassification-6VMVochwUWo/schema`.
pub async fn put_metadata_templates_enterprise_security_classification6_vm_vochw_uwo_schema_delete(configuration: &configuration::Configuration, params: PutMetadataTemplatesEnterpriseSecurityClassification6VmVochwUwoSchemaDeleteParams) -> Result<crate::models::ClassificationTemplate, Error<PutMetadataTemplatesEnterpriseSecurityClassification6VmVochwUwoSchemaDeleteError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let put_metadata_templates_enterprise_security_classification_6_vm_vochw_uwo_schema_delete_request_inner = params.put_metadata_templates_enterprise_security_classification_6_vm_vochw_uwo_schema_delete_request_inner;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/metadata_templates/enterprise/securityClassification-6VMVochwUWo/schema#delete", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&put_metadata_templates_enterprise_security_classification_6_vm_vochw_uwo_schema_delete_request_inner);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PutMetadataTemplatesEnterpriseSecurityClassification6VmVochwUwoSchemaDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Updates the labels and descriptions of one or more classifications available to the enterprise.  This API can also be called by including the enterprise ID in the URL explicitly, for example `/metadata_templates/enterprise_12345/securityClassification-6VMVochwUWo/schema`.
pub async fn put_metadata_templates_enterprise_security_classification6_vm_vochw_uwo_schema_update(configuration: &configuration::Configuration, params: PutMetadataTemplatesEnterpriseSecurityClassification6VmVochwUwoSchemaUpdateParams) -> Result<crate::models::ClassificationTemplate, Error<PutMetadataTemplatesEnterpriseSecurityClassification6VmVochwUwoSchemaUpdateError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let put_metadata_templates_enterprise_security_classification_6_vm_vochw_uwo_schema_update_request_inner = params.put_metadata_templates_enterprise_security_classification_6_vm_vochw_uwo_schema_update_request_inner;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/metadata_templates/enterprise/securityClassification-6VMVochwUWo/schema#update", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&put_metadata_templates_enterprise_security_classification_6_vm_vochw_uwo_schema_update_request_inner);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PutMetadataTemplatesEnterpriseSecurityClassification6VmVochwUwoSchemaUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

