/*
 * Box Platform API
 *
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 * Generated by: https://openapi-generator.tech
 */

/// PostWorkflowsIdStartRequestOutcomesInner : A configurable outcome the workflow should complete. If you have a `task_completion_rule`, you may input `all_assignees` or `any_assignee` in the `variable_value` field. Similarly, if you have a `collaborator_role`, you may input `editor`, `viewer`, `previewer`, `uploader`, `previewer uploader`, `viewer uploader` , `co-owner` in the `variable_value` field.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct PostWorkflowsIdStartRequestOutcomesInner {
    /// The id of the outcome
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The type of the outcome object
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<RHashType>,
    /// This is a placeholder example for various objects that can be passed in - refer to the guides section to find out more information.
    #[serde(rename = "parameter", skip_serializing_if = "Option::is_none")]
    pub parameter: Option<String>,
}

impl PostWorkflowsIdStartRequestOutcomesInner {
    /// A configurable outcome the workflow should complete. If you have a `task_completion_rule`, you may input `all_assignees` or `any_assignee` in the `variable_value` field. Similarly, if you have a `collaborator_role`, you may input `editor`, `viewer`, `previewer`, `uploader`, `previewer uploader`, `viewer uploader` , `co-owner` in the `variable_value` field.
    pub fn new() -> PostWorkflowsIdStartRequestOutcomesInner {
        PostWorkflowsIdStartRequestOutcomesInner {
            id: None,
            r#type: None,
            parameter: None,
        }
    }
}

/// The type of the outcome object
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RHashType {
    #[serde(rename = "outcome")]
    Outcome,
}

impl Default for RHashType {
    fn default() -> RHashType {
        Self::Outcome
    }
}

