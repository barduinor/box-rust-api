/*
 * Box Platform API
 *
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method [`delete_storage_policy_assignments_id`]
#[derive(Clone, Debug, Default)]
pub struct DeleteStoragePolicyAssignmentsIdParams {
    /// The ID of the storage policy assignment.
    pub storage_policy_assignment_id: String
}

/// struct for passing parameters to the method [`get_storage_policy_assignments`]
#[derive(Clone, Debug, Default)]
pub struct GetStoragePolicyAssignmentsParams {
    /// The target type to return assignments for
    pub resolved_for_type: String,
    /// The ID of the user or enterprise to return assignments for
    pub resolved_for_id: String,
    /// Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination.  This requires `usemarker` to be set to `true`.
    pub marker: Option<String>
}

/// struct for passing parameters to the method [`get_storage_policy_assignments_id`]
#[derive(Clone, Debug, Default)]
pub struct GetStoragePolicyAssignmentsIdParams {
    /// The ID of the storage policy assignment.
    pub storage_policy_assignment_id: String
}

/// struct for passing parameters to the method [`post_storage_policy_assignments`]
#[derive(Clone, Debug, Default)]
pub struct PostStoragePolicyAssignmentsParams {
    pub post_storage_policy_assignments_request: Option<crate::models::PostStoragePolicyAssignmentsRequest>
}

/// struct for passing parameters to the method [`put_storage_policy_assignments_id`]
#[derive(Clone, Debug, Default)]
pub struct PutStoragePolicyAssignmentsIdParams {
    /// The ID of the storage policy assignment.
    pub storage_policy_assignment_id: String,
    pub put_storage_policy_assignments_id_request: Option<crate::models::PutStoragePolicyAssignmentsIdRequest>
}


/// struct for typed errors of method [`delete_storage_policy_assignments_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteStoragePolicyAssignmentsIdError {
    DefaultResponse(crate::models::ClientError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_storage_policy_assignments`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetStoragePolicyAssignmentsError {
    DefaultResponse(crate::models::ClientError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_storage_policy_assignments_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetStoragePolicyAssignmentsIdError {
    DefaultResponse(crate::models::ClientError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`post_storage_policy_assignments`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PostStoragePolicyAssignmentsError {
    DefaultResponse(crate::models::ClientError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`put_storage_policy_assignments_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PutStoragePolicyAssignmentsIdError {
    DefaultResponse(crate::models::ClientError),
    UnknownValue(serde_json::Value),
}


/// Delete a storage policy assignment.  Deleting a storage policy assignment on a user will have the user inherit the enterprise's default storage policy.  There is a rate limit for calling this endpoint of only twice per user in a 24 hour time frame.
pub async fn delete_storage_policy_assignments_id(configuration: &configuration::Configuration, params: DeleteStoragePolicyAssignmentsIdParams) -> Result<(), Error<DeleteStoragePolicyAssignmentsIdError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let storage_policy_assignment_id = params.storage_policy_assignment_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/storage_policy_assignments/{storage_policy_assignment_id}", local_var_configuration.base_path, storage_policy_assignment_id=crate::apis::urlencode(storage_policy_assignment_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DeleteStoragePolicyAssignmentsIdError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Fetches all the storage policy assignment for an enterprise or user.
pub async fn get_storage_policy_assignments(configuration: &configuration::Configuration, params: GetStoragePolicyAssignmentsParams) -> Result<crate::models::StoragePolicyAssignments, Error<GetStoragePolicyAssignmentsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let resolved_for_type = params.resolved_for_type;
    let resolved_for_id = params.resolved_for_id;
    let marker = params.marker;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/storage_policy_assignments", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = marker {
        local_var_req_builder = local_var_req_builder.query(&[("marker", &local_var_str.to_string())]);
    }
    local_var_req_builder = local_var_req_builder.query(&[("resolved_for_type", &resolved_for_type.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("resolved_for_id", &resolved_for_id.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetStoragePolicyAssignmentsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Fetches a specific storage policy assignment.
pub async fn get_storage_policy_assignments_id(configuration: &configuration::Configuration, params: GetStoragePolicyAssignmentsIdParams) -> Result<crate::models::StoragePolicyAssignment, Error<GetStoragePolicyAssignmentsIdError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let storage_policy_assignment_id = params.storage_policy_assignment_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/storage_policy_assignments/{storage_policy_assignment_id}", local_var_configuration.base_path, storage_policy_assignment_id=crate::apis::urlencode(storage_policy_assignment_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetStoragePolicyAssignmentsIdError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Creates a storage policy assignment for an enterprise or user.
pub async fn post_storage_policy_assignments(configuration: &configuration::Configuration, params: PostStoragePolicyAssignmentsParams) -> Result<crate::models::StoragePolicyAssignment, Error<PostStoragePolicyAssignmentsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let post_storage_policy_assignments_request = params.post_storage_policy_assignments_request;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/storage_policy_assignments", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&post_storage_policy_assignments_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PostStoragePolicyAssignmentsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Updates a specific storage policy assignment.
pub async fn put_storage_policy_assignments_id(configuration: &configuration::Configuration, params: PutStoragePolicyAssignmentsIdParams) -> Result<crate::models::StoragePolicyAssignment, Error<PutStoragePolicyAssignmentsIdError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let storage_policy_assignment_id = params.storage_policy_assignment_id;
    let put_storage_policy_assignments_id_request = params.put_storage_policy_assignments_id_request;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/storage_policy_assignments/{storage_policy_assignment_id}", local_var_configuration.base_path, storage_policy_assignment_id=crate::apis::urlencode(storage_policy_assignment_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&put_storage_policy_assignments_id_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PutStoragePolicyAssignmentsIdError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

