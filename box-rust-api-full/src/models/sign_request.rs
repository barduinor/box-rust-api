/*
 * Box Platform API
 *
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 * Generated by: https://openapi-generator.tech
 */

/// SignRequest : A Sign Request Object



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct SignRequest {
    /// Indicates if the sender should receive a `prepare_url` in the response to complete document preparation via UI.
    #[serde(rename = "is_document_preparation_needed", skip_serializing_if = "Option::is_none")]
    pub is_document_preparation_needed: Option<bool>,
    /// When specified, signature request will be redirected to this url when a document is signed.
    #[serde(rename = "redirect_url", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub redirect_url: Option<Option<String>>,
    /// The uri that a signer will be redirected to after declining to sign a document.
    #[serde(rename = "declined_redirect_url", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub declined_redirect_url: Option<Option<String>>,
    /// Disables the usage of signatures generated by typing (text).
    #[serde(rename = "are_text_signatures_enabled", skip_serializing_if = "Option::is_none")]
    pub are_text_signatures_enabled: Option<bool>,
    /// Subject of sign request email. This is cleaned by sign request. If this field is not passed, a default subject will be used.
    #[serde(rename = "email_subject", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub email_subject: Option<Option<String>>,
    /// Message to include in sign request email. The field is cleaned through sanitization of specific characters. However, some html tags are allowed. Links included in the message are also converted to hyperlinks in the email. The message may contain the following html tags including `a`, `abbr`, `acronym`, `b`, `blockquote`, `code`, `em`, `i`, `ul`, `li`, `ol`, and `strong`. Be aware that when the text to html ratio is too high, the email may end up in spam filters. Custom styles on these tags are not allowed. If this field is not passed, a default message will be used.
    #[serde(rename = "email_message", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub email_message: Option<Option<String>>,
    /// Reminds signers to sign a document on day 3, 8, 13 and 18. Reminders are only sent to outstanding signers.
    #[serde(rename = "are_reminders_enabled", skip_serializing_if = "Option::is_none")]
    pub are_reminders_enabled: Option<bool>,
    #[serde(rename = "parent_folder")]
    pub parent_folder: Box<crate::models::SignTemplateAllOfParentFolder>,
    /// Name of the sign request.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// When a document contains sign related tags in the content, you can prefill them using this `prefill_tags` by referencing the 'id' of the tag as the `external_id` field of the prefill tag.
    #[serde(rename = "prefill_tags", skip_serializing_if = "Option::is_none")]
    pub prefill_tags: Option<Vec<crate::models::SignRequestPrefillTag>>,
    /// Set the number of days after which the created signature request will automatically expire if not completed. By default, we do not apply any expiration date on signature requests, and the signature request does not expire.
    #[serde(rename = "days_valid", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub days_valid: Option<Option<i32>>,
    /// This can be used to reference an ID in an external system that the sign request is related to.
    #[serde(rename = "external_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub external_id: Option<Option<String>>,
    /// Forces signers to verify a text message prior to viewing the document. You must specify the phone number of signers to have this setting apply to them.
    #[serde(rename = "is_phone_verification_required_to_view", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub is_phone_verification_required_to_view: Option<Option<bool>>,
    /// When a signature request is created from a template this field will indicate the id of that template.
    #[serde(rename = "template_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub template_id: Option<Option<String>>,
    /// object type
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<RHashType>,
    /// List of files to create a signing document from. This is currently limited to ten files. Only the ID and type fields are required for each file.
    #[serde(rename = "source_files", skip_serializing_if = "Option::is_none")]
    pub source_files: Option<Vec<crate::models::FileBase>>,
    /// Array of signers for the sign request
    #[serde(rename = "signers", skip_serializing_if = "Option::is_none")]
    pub signers: Option<Vec<crate::models::SignRequestSigner>>,
    /// Force a specific color for the signature (blue, black, or red).
    #[serde(rename = "signature_color", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub signature_color: Option<Option<String>>,
    /// Sign request ID
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// This URL is returned if `is_document_preparation_needed` is set to `true` in the request. It is used to prepare the sign request via UI. The sign request is not sent until preparation is complete.
    #[serde(rename = "prepare_url", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub prepare_url: Option<Option<String>>,
    #[serde(rename = "signing_log", skip_serializing_if = "Option::is_none")]
    pub signing_log: Option<Box<crate::models::SignRequestAllOfSigningLog>>,
    /// Describes the status of the sign request
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
    #[serde(rename = "sign_files", skip_serializing_if = "Option::is_none")]
    pub sign_files: Option<Box<crate::models::SignRequestAllOfSignFiles>>,
    /// Uses `days_valid` to calculate the date and time, in GMT, the sign request will expire if unsigned.
    #[serde(rename = "auto_expire_at", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub auto_expire_at: Option<Option<String>>,
}

impl SignRequest {
    /// A Sign Request Object
    pub fn new(parent_folder: crate::models::SignTemplateAllOfParentFolder) -> SignRequest {
        SignRequest {
            is_document_preparation_needed: None,
            redirect_url: None,
            declined_redirect_url: None,
            are_text_signatures_enabled: None,
            email_subject: None,
            email_message: None,
            are_reminders_enabled: None,
            parent_folder: Box::new(parent_folder),
            name: None,
            prefill_tags: None,
            days_valid: None,
            external_id: None,
            is_phone_verification_required_to_view: None,
            template_id: None,
            r#type: None,
            source_files: None,
            signers: None,
            signature_color: None,
            id: None,
            prepare_url: None,
            signing_log: None,
            status: None,
            sign_files: None,
            auto_expire_at: None,
        }
    }
}

/// object type
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RHashType {
    #[serde(rename = "sign-request")]
    SignRequest,
}

impl Default for RHashType {
    fn default() -> RHashType {
        Self::SignRequest
    }
}
/// Describes the status of the sign request
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "converting")]
    Converting,
    #[serde(rename = "created")]
    Created,
    #[serde(rename = "sent")]
    Sent,
    #[serde(rename = "viewed")]
    Viewed,
    #[serde(rename = "signed")]
    Signed,
    #[serde(rename = "cancelled")]
    Cancelled,
    #[serde(rename = "declined")]
    Declined,
    #[serde(rename = "error_converting")]
    ErrorConverting,
    #[serde(rename = "error_sending")]
    ErrorSending,
    #[serde(rename = "expired")]
    Expired,
}

impl Default for Status {
    fn default() -> Status {
        Self::Converting
    }
}

