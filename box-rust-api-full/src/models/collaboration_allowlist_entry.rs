/*
 * Box Platform API
 *
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 * Generated by: https://openapi-generator.tech
 */

/// CollaborationAllowlistEntry : An entry that describes an approved domain for which users can collaborate with files and folders in your enterprise or vice versa.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct CollaborationAllowlistEntry {
    /// The unique identifier for this entry
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// `collaboration_whitelist_entry`
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<RHashType>,
    /// The whitelisted domain
    #[serde(rename = "domain", skip_serializing_if = "Option::is_none")]
    pub domain: Option<String>,
    /// The direction of the collaborations to allow.
    #[serde(rename = "direction", skip_serializing_if = "Option::is_none")]
    pub direction: Option<Direction>,
    #[serde(rename = "enterprise", skip_serializing_if = "Option::is_none")]
    pub enterprise: Option<Box<crate::models::CollaborationAllowlistEntryEnterprise>>,
    /// The time the entry was created at
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
}

impl CollaborationAllowlistEntry {
    /// An entry that describes an approved domain for which users can collaborate with files and folders in your enterprise or vice versa.
    pub fn new() -> CollaborationAllowlistEntry {
        CollaborationAllowlistEntry {
            id: None,
            r#type: None,
            domain: None,
            direction: None,
            enterprise: None,
            created_at: None,
        }
    }
}

/// `collaboration_whitelist_entry`
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RHashType {
    #[serde(rename = "collaboration_whitelist_entry")]
    CollaborationWhitelistEntry,
}

impl Default for RHashType {
    fn default() -> RHashType {
        Self::CollaborationWhitelistEntry
    }
}
/// The direction of the collaborations to allow.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Direction {
    #[serde(rename = "inbound")]
    Inbound,
    #[serde(rename = "outbound")]
    Outbound,
    #[serde(rename = "both")]
    Both,
}

impl Default for Direction {
    fn default() -> Direction {
        Self::Inbound
    }
}

