/*
 * Box Platform API
 *
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 * Generated by: https://openapi-generator.tech
 */

/// SkillInvocationStatus : The details status of this event.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct SkillInvocationStatus {
    /// The state of this event.  * `invoked` - Triggered the skill with event details to start   applying skill on the file. * `processing` - Currently processing. * `success` - Completed processing with a success. * `transient_failure` - Encountered an issue which can be   retried. * `permanent_failure` -  Encountered a permanent issue and   retry would not help.
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<State>,
    /// Status information
    #[serde(rename = "message", skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    /// Error code information, if error occurred.
    #[serde(rename = "error_code", skip_serializing_if = "Option::is_none")]
    pub error_code: Option<String>,
    /// Additional status information.
    #[serde(rename = "additional_info", skip_serializing_if = "Option::is_none")]
    pub additional_info: Option<String>,
}

impl SkillInvocationStatus {
    /// The details status of this event.
    pub fn new() -> SkillInvocationStatus {
        SkillInvocationStatus {
            state: None,
            message: None,
            error_code: None,
            additional_info: None,
        }
    }
}

/// The state of this event.  * `invoked` - Triggered the skill with event details to start   applying skill on the file. * `processing` - Currently processing. * `success` - Completed processing with a success. * `transient_failure` - Encountered an issue which can be   retried. * `permanent_failure` -  Encountered a permanent issue and   retry would not help.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "invoked")]
    Invoked,
    #[serde(rename = "processing")]
    Processing,
    #[serde(rename = "success")]
    Success,
    #[serde(rename = "transient_failure")]
    TransientFailure,
    #[serde(rename = "permanent_failure")]
    PermanentFailure,
}

impl Default for State {
    fn default() -> State {
        Self::Invoked
    }
}

