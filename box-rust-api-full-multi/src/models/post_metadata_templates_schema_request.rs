/*
 * Box Platform API
 *
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct PostMetadataTemplatesSchemaRequest {
    /// The scope of the metadata template to create. Applications can only create templates for use within the authenticated user's enterprise.  This value needs to be set to `enterprise`, as `global` scopes can not be created by applications.
    #[serde(rename = "scope")]
    pub scope: String,
    /// A unique identifier for the template. This identifier needs to be unique across the enterprise for which the metadata template is being created.  When not provided, the API will create a unique `templateKey` based on the value of the `displayName`.
    #[serde(rename = "templateKey", skip_serializing_if = "Option::is_none")]
    pub template_key: Option<String>,
    /// The display name of the template.
    #[serde(rename = "displayName")]
    pub display_name: String,
    /// Defines if this template is visible in the Box web app UI, or if it is purely intended for usage through the API.
    #[serde(rename = "hidden", skip_serializing_if = "Option::is_none")]
    pub hidden: Option<bool>,
    /// An ordered list of template fields which are part of the template. Each field can be a regular text field, date field, number field, as well as a single or multi-select list.
    #[serde(rename = "fields", skip_serializing_if = "Option::is_none")]
    pub fields: Option<Vec<crate::models::MetadataFieldWrite>>,
    /// Whether or not to copy any metadata attached to a file or folder when it is copied. By default, metadata is not copied along with a file or folder when it is copied.
    #[serde(rename = "copyInstanceOnItemCopy", skip_serializing_if = "Option::is_none")]
    pub copy_instance_on_item_copy: Option<bool>,
}

impl PostMetadataTemplatesSchemaRequest {
    pub fn new(scope: String, display_name: String) -> PostMetadataTemplatesSchemaRequest {
        PostMetadataTemplatesSchemaRequest {
            scope,
            template_key: None,
            display_name,
            hidden: None,
            fields: None,
            copy_instance_on_item_copy: None,
        }
    }
}


