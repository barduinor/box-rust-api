/*
 * Box Platform API
 *
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct WebLinkAllOfSharedLink {
    /// The URL that can be used to access the item on Box.  This URL will display the item in Box's preview UI where the file can be downloaded if allowed.  This URL will continue to work even when a custom `vanity_url` has been set for this shared link.
    #[serde(rename = "url")]
    pub url: String,
    /// A URL that can be used to download the file. This URL can be used in a browser to download the file. This URL includes the file extension so that the file will be saved with the right file type.  This property will be `null` for folders.
    #[serde(rename = "download_url", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub download_url: Option<Option<String>>,
    /// The \"Custom URL\" that can also be used to preview the item on Box.  Custom URLs can only be created or modified in the Box Web application.
    #[serde(rename = "vanity_url", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub vanity_url: Option<Option<String>>,
    /// The custom name of a shared link, as used in the `vanity_url` field.
    #[serde(rename = "vanity_name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub vanity_name: Option<Option<String>>,
    /// The access level for this shared link.  * `open` - provides access to this item to anyone with this link * `company` - only provides access to this item to people the same company * `collaborators` - only provides access to this item to people who are    collaborators on this item  If this field is omitted when creating the shared link, the access level will be set to the default access level specified by the enterprise admin.
    #[serde(rename = "access", skip_serializing_if = "Option::is_none")]
    pub access: Option<Access>,
    /// The effective access level for the shared link. This can be a more restrictive access level than the value in the `access` field when the enterprise settings restrict the allowed access levels.
    #[serde(rename = "effective_access")]
    pub effective_access: EffectiveAccess,
    /// The effective permissions for this shared link. These result in the more restrictive combination of the share link permissions and the item permissions set by the administrator, the owner, and any ancestor item such as a folder.
    #[serde(rename = "effective_permission")]
    pub effective_permission: EffectivePermission,
    /// The date and time when this link will be unshared. This field can only be set by users with paid accounts.
    #[serde(rename = "unshared_at", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub unshared_at: Option<Option<String>>,
    /// Defines if the shared link requires a password to access the item.
    #[serde(rename = "is_password_enabled")]
    pub is_password_enabled: bool,
    #[serde(rename = "permissions", skip_serializing_if = "Option::is_none")]
    pub permissions: Option<Box<crate::models::SharedLinkPermissions>>,
    /// The number of times this item has been downloaded.
    #[serde(rename = "download_count")]
    pub download_count: i32,
    /// The number of times this item has been previewed.
    #[serde(rename = "preview_count")]
    pub preview_count: i32,
}

impl WebLinkAllOfSharedLink {
    pub fn new(url: String, effective_access: EffectiveAccess, effective_permission: EffectivePermission, is_password_enabled: bool, download_count: i32, preview_count: i32) -> WebLinkAllOfSharedLink {
        WebLinkAllOfSharedLink {
            url,
            download_url: None,
            vanity_url: None,
            vanity_name: None,
            access: None,
            effective_access,
            effective_permission,
            unshared_at: None,
            is_password_enabled,
            permissions: None,
            download_count,
            preview_count,
        }
    }
}

/// The access level for this shared link.  * `open` - provides access to this item to anyone with this link * `company` - only provides access to this item to people the same company * `collaborators` - only provides access to this item to people who are    collaborators on this item  If this field is omitted when creating the shared link, the access level will be set to the default access level specified by the enterprise admin.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Access {
    #[serde(rename = "open")]
    Open,
    #[serde(rename = "company")]
    Company,
    #[serde(rename = "collaborators")]
    Collaborators,
}

impl Default for Access {
    fn default() -> Access {
        Self::Open
    }
}
/// The effective access level for the shared link. This can be a more restrictive access level than the value in the `access` field when the enterprise settings restrict the allowed access levels.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum EffectiveAccess {
    #[serde(rename = "open")]
    Open,
    #[serde(rename = "company")]
    Company,
    #[serde(rename = "collaborators")]
    Collaborators,
}

impl Default for EffectiveAccess {
    fn default() -> EffectiveAccess {
        Self::Open
    }
}
/// The effective permissions for this shared link. These result in the more restrictive combination of the share link permissions and the item permissions set by the administrator, the owner, and any ancestor item such as a folder.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum EffectivePermission {
    #[serde(rename = "can_edit")]
    CanEdit,
    #[serde(rename = "can_download")]
    CanDownload,
    #[serde(rename = "can_preview")]
    CanPreview,
    #[serde(rename = "no_access")]
    NoAccess,
}

impl Default for EffectivePermission {
    fn default() -> EffectivePermission {
        Self::CanEdit
    }
}

