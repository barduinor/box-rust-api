/*
 * Box Platform API
 *
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct PostWorkflowsIdStartRequest {
    /// The type of the parameters object
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<RHashType>,
    #[serde(rename = "flow")]
    pub flow: Box<crate::models::PostWorkflowsIdStartRequestFlow>,
    /// The array of files for which the workflow should start. All files must be in the workflow's configured folder.
    #[serde(rename = "files")]
    pub files: Vec<crate::models::PostWorkflowsIdStartRequestFilesInner>,
    #[serde(rename = "folder")]
    pub folder: Box<crate::models::PostWorkflowsIdStartRequestFolder>,
    /// A list of outcomes required to be configured at start time.
    #[serde(rename = "outcomes", skip_serializing_if = "Option::is_none")]
    pub outcomes: Option<Vec<crate::models::PostWorkflowsIdStartRequestOutcomesInner>>,
}

impl PostWorkflowsIdStartRequest {
    pub fn new(flow: crate::models::PostWorkflowsIdStartRequestFlow, files: Vec<crate::models::PostWorkflowsIdStartRequestFilesInner>, folder: crate::models::PostWorkflowsIdStartRequestFolder) -> PostWorkflowsIdStartRequest {
        PostWorkflowsIdStartRequest {
            r#type: None,
            flow: Box::new(flow),
            files,
            folder: Box::new(folder),
            outcomes: None,
        }
    }
}

/// The type of the parameters object
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RHashType {
    #[serde(rename = "workflow_parameters")]
    WorkflowParameters,
}

impl Default for RHashType {
    fn default() -> RHashType {
        Self::WorkflowParameters
    }
}

