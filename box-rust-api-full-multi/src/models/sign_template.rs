/*
 * Box Platform API
 *
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 * Generated by: https://openapi-generator.tech
 */

/// SignTemplate : A Box Sign template object



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct SignTemplate {
    /// Template identifier.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The name of the template.
    #[serde(rename = "name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub name: Option<Option<String>>,
    /// Subject of signature request email. This is cleaned by sign request. If this field is not passed, a default subject will be used.
    #[serde(rename = "email_subject", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub email_subject: Option<Option<String>>,
    /// Message to include in signature request email. The field is cleaned through sanitization of specific characters. However, some html tags are allowed. Links included in the message are also converted to hyperlinks in the email. The message may contain the following html tags including `a`, `abbr`, `acronym`, `b`, `blockquote`, `code`, `em`, `i`, `ul`, `li`, `ol`, and `strong`. Be aware that when the text to html ratio is too high, the email may end up in spam filters. Custom styles on these tags are not allowed. If this field is not passed, a default message will be used.
    #[serde(rename = "email_message", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub email_message: Option<Option<String>>,
    /// Set the number of days after which the created signature request will automatically expire if not completed. By default, we do not apply any expiration date on signature requests, and the signature request does not expire.
    #[serde(rename = "days_valid", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub days_valid: Option<Option<i32>>,
    #[serde(rename = "parent_folder", skip_serializing_if = "Option::is_none")]
    pub parent_folder: Option<Box<crate::models::SignTemplateAllOfParentFolder>>,
    /// List of files to create a signing document from. Only the ID and type fields are required for each file.
    #[serde(rename = "source_files", skip_serializing_if = "Option::is_none")]
    pub source_files: Option<Vec<crate::models::FileMini>>,
    /// Indicates if the template input fields are editable or not.
    #[serde(rename = "are_fields_locked", skip_serializing_if = "Option::is_none")]
    pub are_fields_locked: Option<bool>,
    /// Indicates if the template document options are editable or not, for example renaming the document.
    #[serde(rename = "are_options_locked", skip_serializing_if = "Option::is_none")]
    pub are_options_locked: Option<bool>,
    /// Indicates if the template signers are editable or not.
    #[serde(rename = "are_recipients_locked", skip_serializing_if = "Option::is_none")]
    pub are_recipients_locked: Option<bool>,
    /// Indicates if the template email settings are editable or not.
    #[serde(rename = "are_email_settings_locked", skip_serializing_if = "Option::is_none")]
    pub are_email_settings_locked: Option<bool>,
    /// Indicates if the template files are editable or not. This includes deleting or renaming template files.
    #[serde(rename = "are_files_locked", skip_serializing_if = "Option::is_none")]
    pub are_files_locked: Option<bool>,
    /// Array of signers for the template.
    #[serde(rename = "signers", skip_serializing_if = "Option::is_none")]
    pub signers: Option<Vec<crate::models::TemplateSigner>>,
    #[serde(rename = "additional_info", skip_serializing_if = "Option::is_none")]
    pub additional_info: Option<Box<crate::models::SignTemplateAllOfAdditionalInfo>>,
    #[serde(rename = "ready_sign_link", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub ready_sign_link: Option<Option<Box<crate::models::SignTemplateAllOfReadySignLink>>>,
    #[serde(rename = "custom_branding", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub custom_branding: Option<Option<Box<crate::models::SignTemplateAllOfCustomBranding>>>,
}

impl SignTemplate {
    /// A Box Sign template object
    pub fn new() -> SignTemplate {
        SignTemplate {
            id: None,
            name: None,
            email_subject: None,
            email_message: None,
            days_valid: None,
            parent_folder: None,
            source_files: None,
            are_fields_locked: None,
            are_options_locked: None,
            are_recipients_locked: None,
            are_email_settings_locked: None,
            are_files_locked: None,
            signers: None,
            additional_info: None,
            ready_sign_link: None,
            custom_branding: None,
        }
    }
}


