/*
 * Box Platform API
 *
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct PutFoldersIdRequest {
    /// The optional new name for this folder.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The optional description of this folder
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Specifies whether a folder should be synced to a user's device or not. This is used by Box Sync (discontinued) and is not used by Box Drive.
    #[serde(rename = "sync_state", skip_serializing_if = "Option::is_none")]
    pub sync_state: Option<SyncState>,
    /// Specifies if users who are not the owner of the folder can invite new collaborators to the folder.
    #[serde(rename = "can_non_owners_invite", skip_serializing_if = "Option::is_none")]
    pub can_non_owners_invite: Option<bool>,
    #[serde(rename = "parent", skip_serializing_if = "Option::is_none")]
    pub parent: Option<Box<crate::models::PutFoldersIdRequestParent>>,
    #[serde(rename = "shared_link", skip_serializing_if = "Option::is_none")]
    pub shared_link: Option<Box<crate::models::PutFoldersIdRequestSharedLink>>,
    #[serde(rename = "folder_upload_email", skip_serializing_if = "Option::is_none")]
    pub folder_upload_email: Option<Box<crate::models::PutFoldersIdRequestFolderUploadEmail>>,
    /// The tags for this item. These tags are shown in the Box web app and mobile apps next to an item.  To add or remove a tag, retrieve the item's current tags, modify them, and then update this field.  There is a limit of 100 tags per item, and 10,000 unique tags per enterprise.
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
    /// Specifies if new invites to this folder are restricted to users within the enterprise. This does not affect existing collaborations.
    #[serde(rename = "is_collaboration_restricted_to_enterprise", skip_serializing_if = "Option::is_none")]
    pub is_collaboration_restricted_to_enterprise: Option<bool>,
    /// An array of collections to make this folder a member of. Currently we only support the `favorites` collection.  To get the ID for a collection, use the [List all collections][1] endpoint.  Passing an empty array `[]` or `null` will remove the folder from all collections.  [1]: ../advanced-files-and-folders/#get-collections
    #[serde(rename = "collections", skip_serializing_if = "Option::is_none")]
    pub collections: Option<Vec<crate::models::Reference>>,
    /// Restricts collaborators who are not the owner of this folder from viewing other collaborations on this folder.  It also restricts non-owners from inviting new collaborators.  When setting this field to `false`, it is required to also set `can_non_owners_invite_collaborators` to `false` if it has not already been set.
    #[serde(rename = "can_non_owners_view_collaborators", skip_serializing_if = "Option::is_none")]
    pub can_non_owners_view_collaborators: Option<bool>,
}

impl PutFoldersIdRequest {
    pub fn new() -> PutFoldersIdRequest {
        PutFoldersIdRequest {
            name: None,
            description: None,
            sync_state: None,
            can_non_owners_invite: None,
            parent: None,
            shared_link: None,
            folder_upload_email: None,
            tags: None,
            is_collaboration_restricted_to_enterprise: None,
            collections: None,
            can_non_owners_view_collaborators: None,
        }
    }
}

/// Specifies whether a folder should be synced to a user's device or not. This is used by Box Sync (discontinued) and is not used by Box Drive.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SyncState {
    #[serde(rename = "synced")]
    Synced,
    #[serde(rename = "not_synced")]
    NotSynced,
    #[serde(rename = "partially_synced")]
    PartiallySynced,
}

impl Default for SyncState {
    fn default() -> SyncState {
        Self::Synced
    }
}

