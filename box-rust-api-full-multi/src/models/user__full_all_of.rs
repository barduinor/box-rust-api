/*
 * Box Platform API
 *
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct UserFullAllOf {
    /// The user’s enterprise role
    #[serde(rename = "role", skip_serializing_if = "Option::is_none")]
    pub role: Option<Role>,
    /// Tracking codes allow an admin to generate reports from the admin console and assign an attribute to a specific group of users. This setting must be enabled for an enterprise before it can be used.
    #[serde(rename = "tracking_codes", skip_serializing_if = "Option::is_none")]
    pub tracking_codes: Option<Vec<crate::models::TrackingCode>>,
    /// Whether the user can see other enterprise users in their contact list
    #[serde(rename = "can_see_managed_users", skip_serializing_if = "Option::is_none")]
    pub can_see_managed_users: Option<bool>,
    /// Whether the user can use Box Sync
    #[serde(rename = "is_sync_enabled", skip_serializing_if = "Option::is_none")]
    pub is_sync_enabled: Option<bool>,
    /// Whether the user is allowed to collaborate with users outside their enterprise
    #[serde(rename = "is_external_collab_restricted", skip_serializing_if = "Option::is_none")]
    pub is_external_collab_restricted: Option<bool>,
    /// Whether to exempt the user from Enterprise device limits
    #[serde(rename = "is_exempt_from_device_limits", skip_serializing_if = "Option::is_none")]
    pub is_exempt_from_device_limits: Option<bool>,
    /// Whether the user must use two-factor authentication
    #[serde(rename = "is_exempt_from_login_verification", skip_serializing_if = "Option::is_none")]
    pub is_exempt_from_login_verification: Option<bool>,
    #[serde(rename = "enterprise", skip_serializing_if = "Option::is_none")]
    pub enterprise: Option<Box<crate::models::UserFullAllOfEnterprise>>,
    /// Tags for all files and folders owned by the user. Values returned will only contain tags that were set by the requester.
    #[serde(rename = "my_tags", skip_serializing_if = "Option::is_none")]
    pub my_tags: Option<Vec<String>>,
    /// The root (protocol, subdomain, domain) of any links that need to be generated for the user
    #[serde(rename = "hostname", skip_serializing_if = "Option::is_none")]
    pub hostname: Option<String>,
    /// Whether the user is an App User
    #[serde(rename = "is_platform_access_only", skip_serializing_if = "Option::is_none")]
    pub is_platform_access_only: Option<bool>,
    /// An external identifier for an app user, which can be used to look up the user. This can be used to tie user IDs from external identity providers to Box users.
    #[serde(rename = "external_app_user_id", skip_serializing_if = "Option::is_none")]
    pub external_app_user_id: Option<String>,
}

impl UserFullAllOf {
    pub fn new() -> UserFullAllOf {
        UserFullAllOf {
            role: None,
            tracking_codes: None,
            can_see_managed_users: None,
            is_sync_enabled: None,
            is_external_collab_restricted: None,
            is_exempt_from_device_limits: None,
            is_exempt_from_login_verification: None,
            enterprise: None,
            my_tags: None,
            hostname: None,
            is_platform_access_only: None,
            external_app_user_id: None,
        }
    }
}

/// The user’s enterprise role
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Role {
    #[serde(rename = "admin")]
    Admin,
    #[serde(rename = "coadmin")]
    Coadmin,
    #[serde(rename = "user")]
    User,
}

impl Default for Role {
    fn default() -> Role {
        Self::Admin
    }
}

