/*
 * Box Platform API
 *
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct PostRetentionPolicyAssignmentsRequest {
    /// The ID of the retention policy to assign
    #[serde(rename = "policy_id")]
    pub policy_id: String,
    #[serde(rename = "assign_to")]
    pub assign_to: Box<crate::models::PostRetentionPolicyAssignmentsRequestAssignTo>,
    /// If the `assign_to` type is `metadata_template`, then optionally add the `filter_fields` parameter which will require an array of objects with a field entry and a value entry. Currently only one object of `field` and `value` is supported.
    #[serde(rename = "filter_fields", skip_serializing_if = "Option::is_none")]
    pub filter_fields: Option<Vec<crate::models::PostRetentionPolicyAssignmentsRequestFilterFieldsInner>>,
    /// The date the retention policy assignment begins.  If the `assigned_to` type is `metadata_template`, this field can be a date field's metadata attribute key id.
    #[serde(rename = "start_date_field", skip_serializing_if = "Option::is_none")]
    pub start_date_field: Option<String>,
}

impl PostRetentionPolicyAssignmentsRequest {
    pub fn new(policy_id: String, assign_to: crate::models::PostRetentionPolicyAssignmentsRequestAssignTo) -> PostRetentionPolicyAssignmentsRequest {
        PostRetentionPolicyAssignmentsRequest {
            policy_id,
            assign_to: Box::new(assign_to),
            filter_fields: None,
            start_date_field: None,
        }
    }
}


