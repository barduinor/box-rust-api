/*
 * Box Platform API
 *
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 * Generated by: https://openapi-generator.tech
 */

/// FileVersionLegalHold : File-Version-Legal-Hold is an entity representing all holds on a File Version.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct FileVersionLegalHold {
    /// The unique identifier for this file version legal hold
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// `file_version_legal_hold`
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<RHashType>,
    #[serde(rename = "file_version", skip_serializing_if = "Option::is_none")]
    pub file_version: Option<Box<crate::models::FileVersionLegalHoldFileVersion>>,
    #[serde(rename = "file", skip_serializing_if = "Option::is_none")]
    pub file: Option<Box<crate::models::FileVersionLegalHoldFile>>,
    /// List of assignments contributing to this Hold.
    #[serde(rename = "legal_hold_policy_assignments", skip_serializing_if = "Option::is_none")]
    pub legal_hold_policy_assignments: Option<Vec<crate::models::LegalHoldPolicyAssignment>>,
    /// Time that this File-Version-Legal-Hold was deleted.
    #[serde(rename = "deleted_at", skip_serializing_if = "Option::is_none")]
    pub deleted_at: Option<String>,
}

impl FileVersionLegalHold {
    /// File-Version-Legal-Hold is an entity representing all holds on a File Version.
    pub fn new() -> FileVersionLegalHold {
        FileVersionLegalHold {
            id: None,
            r#type: None,
            file_version: None,
            file: None,
            legal_hold_policy_assignments: None,
            deleted_at: None,
        }
    }
}

/// `file_version_legal_hold`
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RHashType {
    #[serde(rename = "file_version_legal_hold")]
    FileVersionLegalHold,
}

impl Default for RHashType {
    fn default() -> RHashType {
        Self::FileVersionLegalHold
    }
}

