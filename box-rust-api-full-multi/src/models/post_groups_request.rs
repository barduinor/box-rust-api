/*
 * Box Platform API
 *
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct PostGroupsRequest {
    /// The name of the new group to be created. This name must be unique within the enterprise.
    #[serde(rename = "name")]
    pub name: String,
    /// Keeps track of which external source this group is coming, for example `Active Directory`, or `Okta`.  Setting this will also prevent Box admins from editing the group name and its members directly via the Box web application.  This is desirable for one-way syncing of groups.
    #[serde(rename = "provenance", skip_serializing_if = "Option::is_none")]
    pub provenance: Option<String>,
    /// An arbitrary identifier that can be used by external group sync tools to link this Box Group to an external group.  Example values of this field could be an **Active Directory Object ID** or a **Google Group ID**.  We recommend you use of this field in order to avoid issues when group names are updated in either Box or external systems.
    #[serde(rename = "external_sync_identifier", skip_serializing_if = "Option::is_none")]
    pub external_sync_identifier: Option<String>,
    /// A human readable description of the group.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Specifies who can invite the group to collaborate on folders.  When set to `admins_only` the enterprise admin, co-admins, and the group's admin can invite the group.  When set to `admins_and_members` all the admins listed above and group members can invite the group.  When set to `all_managed_users` all managed users in the enterprise can invite the group.
    #[serde(rename = "invitability_level", skip_serializing_if = "Option::is_none")]
    pub invitability_level: Option<InvitabilityLevel>,
    /// Specifies who can see the members of the group.  * `admins_only` - the enterprise admin, co-admins, group's   group admin * `admins_and_members` - all admins and group members * `all_managed_users` - all managed users in the   enterprise
    #[serde(rename = "member_viewability_level", skip_serializing_if = "Option::is_none")]
    pub member_viewability_level: Option<MemberViewabilityLevel>,
}

impl PostGroupsRequest {
    pub fn new(name: String) -> PostGroupsRequest {
        PostGroupsRequest {
            name,
            provenance: None,
            external_sync_identifier: None,
            description: None,
            invitability_level: None,
            member_viewability_level: None,
        }
    }
}

/// Specifies who can invite the group to collaborate on folders.  When set to `admins_only` the enterprise admin, co-admins, and the group's admin can invite the group.  When set to `admins_and_members` all the admins listed above and group members can invite the group.  When set to `all_managed_users` all managed users in the enterprise can invite the group.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum InvitabilityLevel {
    #[serde(rename = "admins_only")]
    AdminsOnly,
    #[serde(rename = "admins_and_members")]
    AdminsAndMembers,
    #[serde(rename = "all_managed_users")]
    AllManagedUsers,
}

impl Default for InvitabilityLevel {
    fn default() -> InvitabilityLevel {
        Self::AdminsOnly
    }
}
/// Specifies who can see the members of the group.  * `admins_only` - the enterprise admin, co-admins, group's   group admin * `admins_and_members` - all admins and group members * `all_managed_users` - all managed users in the   enterprise
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum MemberViewabilityLevel {
    #[serde(rename = "admins_only")]
    AdminsOnly,
    #[serde(rename = "admins_and_members")]
    AdminsAndMembers,
    #[serde(rename = "all_managed_users")]
    AllManagedUsers,
}

impl Default for MemberViewabilityLevel {
    fn default() -> MemberViewabilityLevel {
        Self::AdminsOnly
    }
}

