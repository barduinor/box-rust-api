/*
 * Box Platform API
 *
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method [`delete_integration_mappings_slack_id`]
#[derive(Clone, Debug, Default)]
pub struct DeleteIntegrationMappingsSlackIdParams {
    /// An ID of an integration mapping
    pub integration_mapping_id: String
}

/// struct for passing parameters to the method [`get_integration_mappings_slack`]
#[derive(Clone, Debug, Default)]
pub struct GetIntegrationMappingsSlackParams {
    /// Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination.  This requires `usemarker` to be set to `true`.
    pub marker: Option<String>,
    /// The maximum number of items to return per page.
    pub limit: Option<i64>,
    /// Mapped item type, for which the mapping should be returned
    pub partner_item_type: Option<String>,
    /// ID of the mapped item, for which the mapping should be returned
    pub partner_item_id: Option<String>,
    /// Box item ID, for which the mappings should be returned
    pub box_item_id: Option<String>,
    /// Box item type, for which the mappings should be returned
    pub box_item_type: Option<String>,
    /// Whether the mapping has been manually created
    pub is_manually_created: Option<bool>
}

/// struct for passing parameters to the method [`post_integration_mappings_slack`]
#[derive(Clone, Debug, Default)]
pub struct PostIntegrationMappingsSlackParams {
    pub integration_mapping_slack_create_request: Option<crate::models::IntegrationMappingSlackCreateRequest>
}

/// struct for passing parameters to the method [`put_integration_mappings_slack_id`]
#[derive(Clone, Debug, Default)]
pub struct PutIntegrationMappingsSlackIdParams {
    /// An ID of an integration mapping
    pub integration_mapping_id: String,
    /// At least one of `box_item` and `options` must be provided.
    pub put_integration_mappings_slack_id_request: Option<crate::models::PutIntegrationMappingsSlackIdRequest>
}


/// struct for typed errors of method [`delete_integration_mappings_slack_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteIntegrationMappingsSlackIdError {
    Status404(crate::models::ClientError),
    DefaultResponse(crate::models::ClientError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_integration_mappings_slack`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetIntegrationMappingsSlackError {
    Status400(crate::models::ClientError),
    Status404(crate::models::ClientError),
    DefaultResponse(crate::models::ClientError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`post_integration_mappings_slack`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PostIntegrationMappingsSlackError {
    Status400(crate::models::ClientError),
    Status404(crate::models::ClientError),
    DefaultResponse(crate::models::ClientError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`put_integration_mappings_slack_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PutIntegrationMappingsSlackIdError {
    Status400(crate::models::ClientError),
    Status404(crate::models::ClientError),
    DefaultResponse(crate::models::ClientError),
    UnknownValue(serde_json::Value),
}


/// Deletes a [Slack integration mapping](https://support.box.com/hc/en-us/articles/4415585987859-Box-as-the-Content-Layer-for-Slack).   You need Admin or Co-Admin role to use this endpoint.
pub async fn delete_integration_mappings_slack_id(configuration: &configuration::Configuration, params: DeleteIntegrationMappingsSlackIdParams) -> Result<(), Error<DeleteIntegrationMappingsSlackIdError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let integration_mapping_id = params.integration_mapping_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/integration_mappings/slack/{integration_mapping_id}", local_var_configuration.base_path, integration_mapping_id=crate::apis::urlencode(integration_mapping_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DeleteIntegrationMappingsSlackIdError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Lists [Slack integration mappings](https://support.box.com/hc/en-us/articles/4415585987859-Box-as-the-Content-Layer-for-Slack) in a users' enterprise.  You need Admin or Co-Admin role to use this endpoint.
pub async fn get_integration_mappings_slack(configuration: &configuration::Configuration, params: GetIntegrationMappingsSlackParams) -> Result<crate::models::IntegrationMappings, Error<GetIntegrationMappingsSlackError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let marker = params.marker;
    let limit = params.limit;
    let partner_item_type = params.partner_item_type;
    let partner_item_id = params.partner_item_id;
    let box_item_id = params.box_item_id;
    let box_item_type = params.box_item_type;
    let is_manually_created = params.is_manually_created;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/integration_mappings/slack", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = marker {
        local_var_req_builder = local_var_req_builder.query(&[("marker", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = partner_item_type {
        local_var_req_builder = local_var_req_builder.query(&[("partner_item_type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = partner_item_id {
        local_var_req_builder = local_var_req_builder.query(&[("partner_item_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = box_item_id {
        local_var_req_builder = local_var_req_builder.query(&[("box_item_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = box_item_type {
        local_var_req_builder = local_var_req_builder.query(&[("box_item_type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = is_manually_created {
        local_var_req_builder = local_var_req_builder.query(&[("is_manually_created", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetIntegrationMappingsSlackError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Creates a [Slack integration mapping](https://support.box.com/hc/en-us/articles/4415585987859-Box-as-the-Content-Layer-for-Slack) by mapping a Slack channel to a Box item.  You need Admin or Co-Admin role to use this endpoint.
pub async fn post_integration_mappings_slack(configuration: &configuration::Configuration, params: PostIntegrationMappingsSlackParams) -> Result<crate::models::IntegrationMapping, Error<PostIntegrationMappingsSlackError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let integration_mapping_slack_create_request = params.integration_mapping_slack_create_request;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/integration_mappings/slack", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&integration_mapping_slack_create_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PostIntegrationMappingsSlackError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Updates a [Slack integration mapping](https://support.box.com/hc/en-us/articles/4415585987859-Box-as-the-Content-Layer-for-Slack). Supports updating the Box folder ID and options.  You need Admin or Co-Admin role to use this endpoint.
pub async fn put_integration_mappings_slack_id(configuration: &configuration::Configuration, params: PutIntegrationMappingsSlackIdParams) -> Result<crate::models::IntegrationMapping, Error<PutIntegrationMappingsSlackIdError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let integration_mapping_id = params.integration_mapping_id;
    let put_integration_mappings_slack_id_request = params.put_integration_mappings_slack_id_request;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/integration_mappings/slack/{integration_mapping_id}", local_var_configuration.base_path, integration_mapping_id=crate::apis::urlencode(integration_mapping_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&put_integration_mappings_slack_id_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PutIntegrationMappingsSlackIdError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

