/*
 * Box Platform API
 *
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 * Generated by: https://openapi-generator.tech
 */

/// PutFilesIdRequestPermissions : Defines who can download a file.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct PutFilesIdRequestPermissions {
    /// Defines who is allowed to download this file. The possible values are either `open` for everyone or `company` for the other members of the user's enterprise.  This setting overrides the download permissions that are normally part of the `role` of a collaboration. When set to `company`, this essentially removes the download option for external users with `viewer` or `editor` a roles.
    #[serde(rename = "can_download", skip_serializing_if = "Option::is_none")]
    pub can_download: Option<CanDownload>,
}

impl PutFilesIdRequestPermissions {
    /// Defines who can download a file.
    pub fn new() -> PutFilesIdRequestPermissions {
        PutFilesIdRequestPermissions {
            can_download: None,
        }
    }
}

/// Defines who is allowed to download this file. The possible values are either `open` for everyone or `company` for the other members of the user's enterprise.  This setting overrides the download permissions that are normally part of the `role` of a collaboration. When set to `company`, this essentially removes the download option for external users with `viewer` or `editor` a roles.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum CanDownload {
    #[serde(rename = "open")]
    Open,
    #[serde(rename = "company")]
    Company,
}

impl Default for CanDownload {
    fn default() -> CanDownload {
        Self::Open
    }
}

