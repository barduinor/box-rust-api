/*
 * Box Platform API
 *
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method [`delete_folders_id_metadata_id_id`]
#[derive(Clone, Debug, Default)]
pub struct DeleteFoldersIdMetadataIdIdParams {
    /// The unique identifier that represent a folder.  The ID for any folder can be determined by visiting this folder in the web application and copying the ID from the URL. For example, for the URL `https://_*.app.box.com/folder/123` the `folder_id` is `123`.  The root folder of a Box account is always represented by the ID `0`.
    pub folder_id: String,
    /// The scope of the metadata template
    pub scope: String,
    /// The name of the metadata template
    pub template_key: String
}

/// struct for passing parameters to the method [`get_folders_id_metadata`]
#[derive(Clone, Debug, Default)]
pub struct GetFoldersIdMetadataParams {
    /// The unique identifier that represent a folder.  The ID for any folder can be determined by visiting this folder in the web application and copying the ID from the URL. For example, for the URL `https://_*.app.box.com/folder/123` the `folder_id` is `123`.  The root folder of a Box account is always represented by the ID `0`.
    pub folder_id: String
}

/// struct for passing parameters to the method [`get_folders_id_metadata_id_id`]
#[derive(Clone, Debug, Default)]
pub struct GetFoldersIdMetadataIdIdParams {
    /// The unique identifier that represent a folder.  The ID for any folder can be determined by visiting this folder in the web application and copying the ID from the URL. For example, for the URL `https://_*.app.box.com/folder/123` the `folder_id` is `123`.  The root folder of a Box account is always represented by the ID `0`.
    pub folder_id: String,
    /// The scope of the metadata template
    pub scope: String,
    /// The name of the metadata template
    pub template_key: String
}

/// struct for passing parameters to the method [`post_folders_id_metadata_id_id`]
#[derive(Clone, Debug, Default)]
pub struct PostFoldersIdMetadataIdIdParams {
    /// The unique identifier that represent a folder.  The ID for any folder can be determined by visiting this folder in the web application and copying the ID from the URL. For example, for the URL `https://_*.app.box.com/folder/123` the `folder_id` is `123`.  The root folder of a Box account is always represented by the ID `0`.
    pub folder_id: String,
    /// The scope of the metadata template
    pub scope: String,
    /// The name of the metadata template
    pub template_key: String,
    pub request_body: Option<::std::collections::HashMap<String, String>>
}

/// struct for passing parameters to the method [`put_folders_id_metadata_id_id`]
#[derive(Clone, Debug, Default)]
pub struct PutFoldersIdMetadataIdIdParams {
    /// The unique identifier that represent a folder.  The ID for any folder can be determined by visiting this folder in the web application and copying the ID from the URL. For example, for the URL `https://_*.app.box.com/folder/123` the `folder_id` is `123`.  The root folder of a Box account is always represented by the ID `0`.
    pub folder_id: String,
    /// The scope of the metadata template
    pub scope: String,
    /// The name of the metadata template
    pub template_key: String,
    pub a_metadata_instance_update_operation: Option<Vec<crate::models::AMetadataInstanceUpdateOperation>>
}


/// struct for typed errors of method [`delete_folders_id_metadata_id_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteFoldersIdMetadataIdIdError {
    Status400(crate::models::ClientError),
    Status404(crate::models::ClientError),
    Status405(crate::models::ClientError),
    DefaultResponse(crate::models::ClientError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_folders_id_metadata`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetFoldersIdMetadataError {
    Status403(crate::models::ClientError),
    Status404(crate::models::ClientError),
    DefaultResponse(crate::models::ClientError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_folders_id_metadata_id_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetFoldersIdMetadataIdIdError {
    Status403(crate::models::ClientError),
    Status404(crate::models::ClientError),
    Status405(crate::models::ClientError),
    DefaultResponse(crate::models::ClientError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`post_folders_id_metadata_id_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PostFoldersIdMetadataIdIdError {
    Status400(crate::models::ClientError),
    Status404(crate::models::ClientError),
    Status409(crate::models::ClientError),
    DefaultResponse(crate::models::ClientError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`put_folders_id_metadata_id_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PutFoldersIdMetadataIdIdError {
    Status400(crate::models::ClientError),
    Status500(crate::models::ClientError),
    DefaultResponse(crate::models::ClientError),
    UnknownValue(serde_json::Value),
}


/// Deletes a piece of folder metadata.
pub async fn delete_folders_id_metadata_id_id(configuration: &configuration::Configuration, params: DeleteFoldersIdMetadataIdIdParams) -> Result<(), Error<DeleteFoldersIdMetadataIdIdError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let folder_id = params.folder_id;
    let scope = params.scope;
    let template_key = params.template_key;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/folders/{folder_id}/metadata/{scope}/{template_key}", local_var_configuration.base_path, folder_id=crate::apis::urlencode(folder_id), scope=crate::apis::urlencode(scope), template_key=crate::apis::urlencode(template_key));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DeleteFoldersIdMetadataIdIdError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Retrieves all metadata for a given folder. This can not be used on the root folder with ID `0`.
pub async fn get_folders_id_metadata(configuration: &configuration::Configuration, params: GetFoldersIdMetadataParams) -> Result<crate::models::Metadatas, Error<GetFoldersIdMetadataError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let folder_id = params.folder_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/folders/{folder_id}/metadata", local_var_configuration.base_path, folder_id=crate::apis::urlencode(folder_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetFoldersIdMetadataError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Retrieves the instance of a metadata template that has been applied to a folder. This can not be used on the root folder with ID `0`.
pub async fn get_folders_id_metadata_id_id(configuration: &configuration::Configuration, params: GetFoldersIdMetadataIdIdParams) -> Result<crate::models::Metadata, Error<GetFoldersIdMetadataIdIdError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let folder_id = params.folder_id;
    let scope = params.scope;
    let template_key = params.template_key;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/folders/{folder_id}/metadata/{scope}/{template_key}", local_var_configuration.base_path, folder_id=crate::apis::urlencode(folder_id), scope=crate::apis::urlencode(scope), template_key=crate::apis::urlencode(template_key));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetFoldersIdMetadataIdIdError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Applies an instance of a metadata template to a folder.  In most cases only values that are present in the metadata template will be accepted, except for the `global.properties` template which accepts any key-value pair.  To display the metadata template in the Box web app the enterprise needs to be configured to enable **Cascading Folder Level Metadata** for the user in the admin console.
pub async fn post_folders_id_metadata_id_id(configuration: &configuration::Configuration, params: PostFoldersIdMetadataIdIdParams) -> Result<crate::models::Metadata, Error<PostFoldersIdMetadataIdIdError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let folder_id = params.folder_id;
    let scope = params.scope;
    let template_key = params.template_key;
    let request_body = params.request_body;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/folders/{folder_id}/metadata/{scope}/{template_key}", local_var_configuration.base_path, folder_id=crate::apis::urlencode(folder_id), scope=crate::apis::urlencode(scope), template_key=crate::apis::urlencode(template_key));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&request_body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PostFoldersIdMetadataIdIdError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Updates a piece of metadata on a folder.  The metadata instance can only be updated if the template has already been applied to the folder before. When editing metadata, only values that match the metadata template schema will be accepted.  The update is applied atomically. If any errors occur during the application of the operations, the metadata instance will not be changed.
pub async fn put_folders_id_metadata_id_id(configuration: &configuration::Configuration, params: PutFoldersIdMetadataIdIdParams) -> Result<crate::models::Metadata, Error<PutFoldersIdMetadataIdIdError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let folder_id = params.folder_id;
    let scope = params.scope;
    let template_key = params.template_key;
    let a_metadata_instance_update_operation = params.a_metadata_instance_update_operation;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/folders/{folder_id}/metadata/{scope}/{template_key}", local_var_configuration.base_path, folder_id=crate::apis::urlencode(folder_id), scope=crate::apis::urlencode(scope), template_key=crate::apis::urlencode(template_key));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&a_metadata_instance_update_operation);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PutFoldersIdMetadataIdIdError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

