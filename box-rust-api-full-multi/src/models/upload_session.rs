/*
 * Box Platform API
 *
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 * Generated by: https://openapi-generator.tech
 */

/// UploadSession : An upload session for chunk uploading a file.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct UploadSession {
    /// The unique identifier for this session
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// `upload_session`
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<RHashType>,
    /// The date and time when this session expires.
    #[serde(rename = "session_expires_at", skip_serializing_if = "Option::is_none")]
    pub session_expires_at: Option<String>,
    /// The  size in bytes that must be used for all parts of of the upload.  Only the last part is allowed to be of a smaller size.
    #[serde(rename = "part_size", skip_serializing_if = "Option::is_none")]
    pub part_size: Option<i64>,
    /// The total number of parts expected in this upload session, as determined by the file size and part size.
    #[serde(rename = "total_parts", skip_serializing_if = "Option::is_none")]
    pub total_parts: Option<i32>,
    /// The number of parts that have been uploaded and processed by the server. This starts at `0`.  When committing a file files, inspecting this property can provide insight if all parts have been uploaded correctly.
    #[serde(rename = "num_parts_processed", skip_serializing_if = "Option::is_none")]
    pub num_parts_processed: Option<i32>,
    #[serde(rename = "session_endpoints", skip_serializing_if = "Option::is_none")]
    pub session_endpoints: Option<Box<crate::models::UploadSessionSessionEndpoints>>,
}

impl UploadSession {
    /// An upload session for chunk uploading a file.
    pub fn new() -> UploadSession {
        UploadSession {
            id: None,
            r#type: None,
            session_expires_at: None,
            part_size: None,
            total_parts: None,
            num_parts_processed: None,
            session_endpoints: None,
        }
    }
}

/// `upload_session`
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RHashType {
    #[serde(rename = "upload_session")]
    UploadSession,
}

impl Default for RHashType {
    fn default() -> RHashType {
        Self::UploadSession
    }
}

