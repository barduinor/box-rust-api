/*
 * Box Platform API
 *
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 * Generated by: https://openapi-generator.tech
 */

/// StatusSkillCardStatus : Sets the status of the skill. This can be used to show a message to the user while the Skill is processing the data, or if it was not able to process the file.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct StatusSkillCardStatus {
    /// A code for the status of this Skill invocation. By default each of these will have their own accompanied messages. These can be adjusted by setting the `message` value on this object.
    #[serde(rename = "code")]
    pub code: Code,
    /// A custom message that can be provided with this status. This will be shown in the web app to the end user.
    #[serde(rename = "message", skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
}

impl StatusSkillCardStatus {
    /// Sets the status of the skill. This can be used to show a message to the user while the Skill is processing the data, or if it was not able to process the file.
    pub fn new(code: Code) -> StatusSkillCardStatus {
        StatusSkillCardStatus {
            code,
            message: None,
        }
    }
}

/// A code for the status of this Skill invocation. By default each of these will have their own accompanied messages. These can be adjusted by setting the `message` value on this object.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Code {
    #[serde(rename = "invoked")]
    Invoked,
    #[serde(rename = "processing")]
    Processing,
    #[serde(rename = "success")]
    Success,
    #[serde(rename = "transient_failure")]
    TransientFailure,
    #[serde(rename = "permanent_failure")]
    PermanentFailure,
}

impl Default for Code {
    fn default() -> Code {
        Self::Invoked
    }
}

