/*
 * Box Platform API
 *
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 * Generated by: https://openapi-generator.tech
 */

/// TemplateSigner : The schema for a Signer for Templates



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct TemplateSigner {
    #[serde(rename = "inputs", skip_serializing_if = "Option::is_none")]
    pub inputs: Option<Vec<crate::models::TemplateSignerInput>>,
    /// Email address of the signer
    #[serde(rename = "email", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub email: Option<Option<String>>,
    /// Defines the role of the signer in the signature request. A role of `signer` needs to sign the document, a role `approver` approves the document and a `final_copy_reader` role only receives the final signed document and signing log.
    #[serde(rename = "role", skip_serializing_if = "Option::is_none")]
    pub role: Option<Role>,
    /// Used in combination with an embed URL for a sender. After the sender signs, they will be redirected to the next `in_person` signer.
    #[serde(rename = "is_in_person", skip_serializing_if = "Option::is_none")]
    pub is_in_person: Option<bool>,
    /// Order of the signer
    #[serde(rename = "order", skip_serializing_if = "Option::is_none")]
    pub order: Option<i32>,
}

impl TemplateSigner {
    /// The schema for a Signer for Templates
    pub fn new() -> TemplateSigner {
        TemplateSigner {
            inputs: None,
            email: None,
            role: None,
            is_in_person: None,
            order: None,
        }
    }
}

/// Defines the role of the signer in the signature request. A role of `signer` needs to sign the document, a role `approver` approves the document and a `final_copy_reader` role only receives the final signed document and signing log.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Role {
    #[serde(rename = "signer")]
    Signer,
    #[serde(rename = "approver")]
    Approver,
    #[serde(rename = "final_copy_reader")]
    FinalCopyReader,
}

impl Default for Role {
    fn default() -> Role {
        Self::Signer
    }
}

