/*
 * Box Platform API
 *
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 * Generated by: https://openapi-generator.tech
 */

/// AMetadataTemplateUpdateOperation : A [JSON-Patch](https://tools.ietf.org/html/rfc6902) operation for a change to make to the metadata instance.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct AMetadataTemplateUpdateOperation {
    /// The type of change to perform on the template. Some of these are hazardous as they will change existing templates.
    #[serde(rename = "op")]
    pub op: Op,
    /// The data for the operation. This will vary depending on the operation being performed.
    #[serde(rename = "data", skip_serializing_if = "Option::is_none")]
    pub data: Option<::std::collections::HashMap<String, String>>,
    /// For operations that affect a single field this defines the key of the field that is affected.
    #[serde(rename = "fieldKey", skip_serializing_if = "Option::is_none")]
    pub field_key: Option<String>,
    /// For operations that affect multiple fields this defines the keys of the fields that are affected.
    #[serde(rename = "fieldKeys", skip_serializing_if = "Option::is_none")]
    pub field_keys: Option<Vec<String>>,
    /// For operations that affect a single `enum` option this defines the key of the option that is affected.
    #[serde(rename = "enumOptionKey", skip_serializing_if = "Option::is_none")]
    pub enum_option_key: Option<String>,
    /// For operations that affect multiple `enum` options this defines the keys of the options that are affected.
    #[serde(rename = "enumOptionKeys", skip_serializing_if = "Option::is_none")]
    pub enum_option_keys: Option<Vec<String>>,
    /// For operations that affect a single multi select option this defines the key of the option that is affected.
    #[serde(rename = "multiSelectOptionKey", skip_serializing_if = "Option::is_none")]
    pub multi_select_option_key: Option<String>,
    /// For operations that affect multiple multi select options this defines the keys of the options that are affected.
    #[serde(rename = "multiSelectOptionKeys", skip_serializing_if = "Option::is_none")]
    pub multi_select_option_keys: Option<Vec<String>>,
}

impl AMetadataTemplateUpdateOperation {
    /// A [JSON-Patch](https://tools.ietf.org/html/rfc6902) operation for a change to make to the metadata instance.
    pub fn new(op: Op) -> AMetadataTemplateUpdateOperation {
        AMetadataTemplateUpdateOperation {
            op,
            data: None,
            field_key: None,
            field_keys: None,
            enum_option_key: None,
            enum_option_keys: None,
            multi_select_option_key: None,
            multi_select_option_keys: None,
        }
    }
}

/// The type of change to perform on the template. Some of these are hazardous as they will change existing templates.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Op {
    #[serde(rename = "editTemplate")]
    EditTemplate,
    #[serde(rename = "addField")]
    AddField,
    #[serde(rename = "reorderFields")]
    ReorderFields,
    #[serde(rename = "addEnumOption")]
    AddEnumOption,
    #[serde(rename = "reorderEnumOptions")]
    ReorderEnumOptions,
    #[serde(rename = "reorderMultiSelectOptions")]
    ReorderMultiSelectOptions,
    #[serde(rename = "addMultiSelectOption")]
    AddMultiSelectOption,
    #[serde(rename = "editField")]
    EditField,
    #[serde(rename = "removeField")]
    RemoveField,
    #[serde(rename = "editEnumOption")]
    EditEnumOption,
    #[serde(rename = "removeEnumOption")]
    RemoveEnumOption,
    #[serde(rename = "editMultiSelectOption")]
    EditMultiSelectOption,
    #[serde(rename = "removeMultiSelectOption")]
    RemoveMultiSelectOption,
}

impl Default for Op {
    fn default() -> Op {
        Self::EditTemplate
    }
}

