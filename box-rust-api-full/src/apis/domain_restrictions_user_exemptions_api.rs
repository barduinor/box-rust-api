/*
 * Box Platform API
 *
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method [`delete_collaboration_whitelist_exempt_targets_id`]
#[derive(Clone, Debug, Default)]
pub struct DeleteCollaborationWhitelistExemptTargetsIdParams {
    /// The ID of the exemption to the list.
    pub collaboration_whitelist_exempt_target_id: String
}

/// struct for passing parameters to the method [`get_collaboration_whitelist_exempt_targets`]
#[derive(Clone, Debug, Default)]
pub struct GetCollaborationWhitelistExemptTargetsParams {
    /// Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination.  This requires `usemarker` to be set to `true`.
    pub marker: Option<String>,
    /// The maximum number of items to return per page.
    pub limit: Option<i64>
}

/// struct for passing parameters to the method [`get_collaboration_whitelist_exempt_targets_id`]
#[derive(Clone, Debug, Default)]
pub struct GetCollaborationWhitelistExemptTargetsIdParams {
    /// The ID of the exemption to the list.
    pub collaboration_whitelist_exempt_target_id: String
}

/// struct for passing parameters to the method [`post_collaboration_whitelist_exempt_targets`]
#[derive(Clone, Debug, Default)]
pub struct PostCollaborationWhitelistExemptTargetsParams {
    pub post_collaboration_whitelist_exempt_targets_request: Option<crate::models::PostCollaborationWhitelistExemptTargetsRequest>
}


/// struct for typed errors of method [`delete_collaboration_whitelist_exempt_targets_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteCollaborationWhitelistExemptTargetsIdError {
    DefaultResponse(crate::models::ClientError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_collaboration_whitelist_exempt_targets`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCollaborationWhitelistExemptTargetsError {
    DefaultResponse(crate::models::ClientError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_collaboration_whitelist_exempt_targets_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCollaborationWhitelistExemptTargetsIdError {
    DefaultResponse(crate::models::ClientError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`post_collaboration_whitelist_exempt_targets`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PostCollaborationWhitelistExemptTargetsError {
    DefaultResponse(crate::models::ClientError),
    UnknownValue(serde_json::Value),
}


/// Removes a user's exemption from the restrictions set out by the allowed list of domains for collaborations.
pub async fn delete_collaboration_whitelist_exempt_targets_id(configuration: &configuration::Configuration, params: DeleteCollaborationWhitelistExemptTargetsIdParams) -> Result<(), Error<DeleteCollaborationWhitelistExemptTargetsIdError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let collaboration_whitelist_exempt_target_id = params.collaboration_whitelist_exempt_target_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/collaboration_whitelist_exempt_targets/{collaboration_whitelist_exempt_target_id}", local_var_configuration.base_path, collaboration_whitelist_exempt_target_id=crate::apis::urlencode(collaboration_whitelist_exempt_target_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DeleteCollaborationWhitelistExemptTargetsIdError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns a list of users who have been exempt from the collaboration domain restrictions.
pub async fn get_collaboration_whitelist_exempt_targets(configuration: &configuration::Configuration, params: GetCollaborationWhitelistExemptTargetsParams) -> Result<crate::models::CollaborationAllowlistExemptTargets, Error<GetCollaborationWhitelistExemptTargetsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let marker = params.marker;
    let limit = params.limit;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/collaboration_whitelist_exempt_targets", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = marker {
        local_var_req_builder = local_var_req_builder.query(&[("marker", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetCollaborationWhitelistExemptTargetsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns a users who has been exempt from the collaboration domain restrictions.
pub async fn get_collaboration_whitelist_exempt_targets_id(configuration: &configuration::Configuration, params: GetCollaborationWhitelistExemptTargetsIdParams) -> Result<crate::models::CollaborationAllowlistExemptTarget, Error<GetCollaborationWhitelistExemptTargetsIdError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let collaboration_whitelist_exempt_target_id = params.collaboration_whitelist_exempt_target_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/collaboration_whitelist_exempt_targets/{collaboration_whitelist_exempt_target_id}", local_var_configuration.base_path, collaboration_whitelist_exempt_target_id=crate::apis::urlencode(collaboration_whitelist_exempt_target_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetCollaborationWhitelistExemptTargetsIdError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Exempts a user from the restrictions set out by the allowed list of domains for collaborations.
pub async fn post_collaboration_whitelist_exempt_targets(configuration: &configuration::Configuration, params: PostCollaborationWhitelistExemptTargetsParams) -> Result<crate::models::CollaborationAllowlistExemptTarget, Error<PostCollaborationWhitelistExemptTargetsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let post_collaboration_whitelist_exempt_targets_request = params.post_collaboration_whitelist_exempt_targets_request;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/collaboration_whitelist_exempt_targets", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&post_collaboration_whitelist_exempt_targets_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PostCollaborationWhitelistExemptTargetsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

