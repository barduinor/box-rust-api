/*
 * Box Platform API
 *
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 * Generated by: https://openapi-generator.tech
 */

/// MetadataTemplateFieldsInner : A field within a metadata template. Fields can be a basic text, date, or number field, or a list of options.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct MetadataTemplateFieldsInner {
    /// The type of field. The basic fields are a `string` field for text, a `float` field for numbers, and a `date` fields to present the user with a date-time picker.  Additionally, metadata templates support an `enum` field for a basic list of items, and ` multiSelect` field for a similar list of items where the user can select more than one value.
    #[serde(rename = "type")]
    pub r#type: RHashType,
    /// A unique identifier for the field. The identifier must be unique within the template to which it belongs.
    #[serde(rename = "key")]
    pub key: String,
    /// The display name of the field as it is shown to the user in the web and mobile apps.
    #[serde(rename = "displayName")]
    pub display_name: String,
    /// A description of the field. This is not shown to the user.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Whether this field is hidden in the UI for the user and can only be set through the API instead.
    #[serde(rename = "hidden", skip_serializing_if = "Option::is_none")]
    pub hidden: Option<bool>,
    /// A list of options for this field. This is used in combination with the `enum` and `multiSelect` field types.
    #[serde(rename = "options", skip_serializing_if = "Option::is_none")]
    pub options: Option<Vec<crate::models::MetadataTemplateFieldsInnerAllOfOptionsInner>>,
    /// The unique ID of the metadata template field.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
}

impl MetadataTemplateFieldsInner {
    /// A field within a metadata template. Fields can be a basic text, date, or number field, or a list of options.
    pub fn new(r#type: RHashType, key: String, display_name: String) -> MetadataTemplateFieldsInner {
        MetadataTemplateFieldsInner {
            r#type,
            key,
            display_name,
            description: None,
            hidden: None,
            options: None,
            id: None,
        }
    }
}

/// The type of field. The basic fields are a `string` field for text, a `float` field for numbers, and a `date` fields to present the user with a date-time picker.  Additionally, metadata templates support an `enum` field for a basic list of items, and ` multiSelect` field for a similar list of items where the user can select more than one value.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RHashType {
    #[serde(rename = "string")]
    String,
    #[serde(rename = "float")]
    Float,
    #[serde(rename = "date")]
    Date,
    #[serde(rename = "enum")]
    Enum,
    #[serde(rename = "multiSelect")]
    MultiSelect,
}

impl Default for RHashType {
    fn default() -> RHashType {
        Self::String
    }
}

