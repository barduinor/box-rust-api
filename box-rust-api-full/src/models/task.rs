/*
 * Box Platform API
 *
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 * Generated by: https://openapi-generator.tech
 */

/// Task : A task allows for file-centric workflows within Box. Users can create tasks on files and assign them to other users for them to complete the tasks.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Task {
    /// The unique identifier for this task
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// `task`
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<RHashType>,
    #[serde(rename = "item", skip_serializing_if = "Option::is_none")]
    pub item: Option<Box<crate::models::TaskItem>>,
    /// When the task is due
    #[serde(rename = "due_at", skip_serializing_if = "Option::is_none")]
    pub due_at: Option<String>,
    /// The type of task the task assignee will be prompted to perform.
    #[serde(rename = "action", skip_serializing_if = "Option::is_none")]
    pub action: Option<Action>,
    /// A message that will be included with the task
    #[serde(rename = "message", skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(rename = "task_assignment_collection", skip_serializing_if = "Option::is_none")]
    pub task_assignment_collection: Option<Box<crate::models::TaskTaskAssignmentCollection>>,
    /// Whether the task has been completed
    #[serde(rename = "is_completed", skip_serializing_if = "Option::is_none")]
    pub is_completed: Option<bool>,
    #[serde(rename = "created_by", skip_serializing_if = "Option::is_none")]
    pub created_by: Option<Box<crate::models::TaskCreatedBy>>,
    /// When the task object was created
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    /// Defines which assignees need to complete this task before the task is considered completed.  * `all_assignees` requires all assignees to review or approve the the task in order for it to be considered completed. * `any_assignee` accepts any one assignee to review or approve the the task in order for it to be considered completed.
    #[serde(rename = "completion_rule", skip_serializing_if = "Option::is_none")]
    pub completion_rule: Option<CompletionRule>,
}

impl Task {
    /// A task allows for file-centric workflows within Box. Users can create tasks on files and assign them to other users for them to complete the tasks.
    pub fn new() -> Task {
        Task {
            id: None,
            r#type: None,
            item: None,
            due_at: None,
            action: None,
            message: None,
            task_assignment_collection: None,
            is_completed: None,
            created_by: None,
            created_at: None,
            completion_rule: None,
        }
    }
}

/// `task`
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RHashType {
    #[serde(rename = "task")]
    Task,
}

impl Default for RHashType {
    fn default() -> RHashType {
        Self::Task
    }
}
/// The type of task the task assignee will be prompted to perform.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Action {
    #[serde(rename = "review")]
    Review,
    #[serde(rename = "complete")]
    Complete,
}

impl Default for Action {
    fn default() -> Action {
        Self::Review
    }
}
/// Defines which assignees need to complete this task before the task is considered completed.  * `all_assignees` requires all assignees to review or approve the the task in order for it to be considered completed. * `any_assignee` accepts any one assignee to review or approve the the task in order for it to be considered completed.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum CompletionRule {
    #[serde(rename = "all_assignees")]
    AllAssignees,
    #[serde(rename = "any_assignee")]
    AnyAssignee,
}

impl Default for CompletionRule {
    fn default() -> CompletionRule {
        Self::AllAssignees
    }
}

