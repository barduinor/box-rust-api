/*
 * Box Platform API
 *
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct PostTasksRequest {
    #[serde(rename = "item")]
    pub item: Box<crate::models::PostTasksRequestItem>,
    /// The action the task assignee will be prompted to do. Must be  * `review` defines an approval task that can be approved or rejected * `complete` defines a general task which can be completed
    #[serde(rename = "action", skip_serializing_if = "Option::is_none")]
    pub action: Option<Action>,
    /// An optional message to include with the task.
    #[serde(rename = "message", skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    /// Defines when the task is due. Defaults to `null` if not provided.
    #[serde(rename = "due_at", skip_serializing_if = "Option::is_none")]
    pub due_at: Option<String>,
    /// Defines which assignees need to complete this task before the task is considered completed.  * `all_assignees` (default) requires all assignees to review or approve the the task in order for it to be considered completed. * `any_assignee` accepts any one assignee to review or approve the the task in order for it to be considered completed.
    #[serde(rename = "completion_rule", skip_serializing_if = "Option::is_none")]
    pub completion_rule: Option<CompletionRule>,
}

impl PostTasksRequest {
    pub fn new(item: crate::models::PostTasksRequestItem) -> PostTasksRequest {
        PostTasksRequest {
            item: Box::new(item),
            action: None,
            message: None,
            due_at: None,
            completion_rule: None,
        }
    }
}

/// The action the task assignee will be prompted to do. Must be  * `review` defines an approval task that can be approved or rejected * `complete` defines a general task which can be completed
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Action {
    #[serde(rename = "review")]
    Review,
    #[serde(rename = "complete")]
    Complete,
}

impl Default for Action {
    fn default() -> Action {
        Self::Review
    }
}
/// Defines which assignees need to complete this task before the task is considered completed.  * `all_assignees` (default) requires all assignees to review or approve the the task in order for it to be considered completed. * `any_assignee` accepts any one assignee to review or approve the the task in order for it to be considered completed.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum CompletionRule {
    #[serde(rename = "all_assignees")]
    AllAssignees,
    #[serde(rename = "any_assignee")]
    AnyAssignee,
}

impl Default for CompletionRule {
    fn default() -> CompletionRule {
        Self::AllAssignees
    }
}

