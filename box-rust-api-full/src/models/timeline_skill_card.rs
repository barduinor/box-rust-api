/*
 * Box Platform API
 *
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 * Generated by: https://openapi-generator.tech
 */

/// TimelineSkillCard : A Box Skill metadata card that places a list of images on a timeline.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct TimelineSkillCard {
    /// The optional date and time this card was created at.
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    /// `skill_card`
    #[serde(rename = "type")]
    pub r#type: RHashType,
    /// `timeline`
    #[serde(rename = "skill_card_type")]
    pub skill_card_type: SkillCardType,
    #[serde(rename = "skill_card_title", skip_serializing_if = "Option::is_none")]
    pub skill_card_title: Option<Box<crate::models::TimelineSkillCardSkillCardTitle>>,
    #[serde(rename = "skill")]
    pub skill: Box<crate::models::KeywordSkillCardSkill>,
    #[serde(rename = "invocation")]
    pub invocation: Box<crate::models::KeywordSkillCardInvocation>,
    /// An total duration in seconds of the timeline.
    #[serde(rename = "duration", skip_serializing_if = "Option::is_none")]
    pub duration: Option<i32>,
    /// A list of entries on the timeline.
    #[serde(rename = "entries")]
    pub entries: Vec<crate::models::TimelineSkillCardEntriesInner>,
}

impl TimelineSkillCard {
    /// A Box Skill metadata card that places a list of images on a timeline.
    pub fn new(r#type: RHashType, skill_card_type: SkillCardType, skill: crate::models::KeywordSkillCardSkill, invocation: crate::models::KeywordSkillCardInvocation, entries: Vec<crate::models::TimelineSkillCardEntriesInner>) -> TimelineSkillCard {
        TimelineSkillCard {
            created_at: None,
            r#type,
            skill_card_type,
            skill_card_title: None,
            skill: Box::new(skill),
            invocation: Box::new(invocation),
            duration: None,
            entries,
        }
    }
}

/// `skill_card`
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RHashType {
    #[serde(rename = "skill_card")]
    SkillCard,
}

impl Default for RHashType {
    fn default() -> RHashType {
        Self::SkillCard
    }
}
/// `timeline`
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SkillCardType {
    #[serde(rename = "timeline")]
    Timeline,
}

impl Default for SkillCardType {
    fn default() -> SkillCardType {
        Self::Timeline
    }
}

