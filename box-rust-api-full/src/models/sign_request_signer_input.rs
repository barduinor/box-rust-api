/*
 * Box Platform API
 *
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 * Generated by: https://openapi-generator.tech
 */

/// SignRequestSignerInput : Input created by a Signer on a Sign Request



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct SignRequestSignerInput {
    /// This references the ID of a specific tag contained in a file of the sign request.
    #[serde(rename = "document_tag_id", skip_serializing_if = "Option::is_none")]
    pub document_tag_id: Option<String>,
    /// Text prefill value
    #[serde(rename = "text_value", skip_serializing_if = "Option::is_none")]
    pub text_value: Option<String>,
    /// Checkbox prefill value
    #[serde(rename = "checkbox_value", skip_serializing_if = "Option::is_none")]
    pub checkbox_value: Option<bool>,
    /// Date prefill value
    #[serde(rename = "date_value", skip_serializing_if = "Option::is_none")]
    pub date_value: Option<String>,
    /// Type of input
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<RHashType>,
    /// Content type of input
    #[serde(rename = "content_type", skip_serializing_if = "Option::is_none")]
    pub content_type: Option<ContentType>,
    /// Index of page that the input is on
    #[serde(rename = "page_index")]
    pub page_index: i32,
}

impl SignRequestSignerInput {
    /// Input created by a Signer on a Sign Request
    pub fn new(page_index: i32) -> SignRequestSignerInput {
        SignRequestSignerInput {
            document_tag_id: None,
            text_value: None,
            checkbox_value: None,
            date_value: None,
            r#type: None,
            content_type: None,
            page_index,
        }
    }
}

/// Type of input
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RHashType {
    #[serde(rename = "signature")]
    Signature,
    #[serde(rename = "date")]
    Date,
    #[serde(rename = "text")]
    Text,
    #[serde(rename = "checkbox")]
    Checkbox,
}

impl Default for RHashType {
    fn default() -> RHashType {
        Self::Signature
    }
}
/// Content type of input
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ContentType {
    #[serde(rename = "initial")]
    Initial,
    #[serde(rename = "stamp")]
    Stamp,
    #[serde(rename = "signature")]
    Signature,
    #[serde(rename = "company")]
    Company,
    #[serde(rename = "title")]
    Title,
    #[serde(rename = "email")]
    Email,
    #[serde(rename = "full_name")]
    FullName,
    #[serde(rename = "first_name")]
    FirstName,
    #[serde(rename = "last_name")]
    LastName,
    #[serde(rename = "text")]
    Text,
    #[serde(rename = "date")]
    Date,
    #[serde(rename = "checkbox")]
    Checkbox,
    #[serde(rename = "attachment")]
    Attachment,
}

impl Default for ContentType {
    fn default() -> ContentType {
        Self::Initial
    }
}

