/*
 * Box Platform API
 *
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 * Generated by: https://openapi-generator.tech
 */

/// Event : The description of an event that happened within Box



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Event {
    /// `event`
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<String>,
    /// When the event object was created
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    /// When the event object was recorded in database
    #[serde(rename = "recorded_at", skip_serializing_if = "Option::is_none")]
    pub recorded_at: Option<String>,
    /// The ID of the event object. You can use this to detect duplicate events
    #[serde(rename = "event_id", skip_serializing_if = "Option::is_none")]
    pub event_id: Option<String>,
    #[serde(rename = "created_by", skip_serializing_if = "Option::is_none")]
    pub created_by: Option<Box<crate::models::EventCreatedBy>>,
    #[serde(rename = "event_type", skip_serializing_if = "Option::is_none")]
    pub event_type: Option<Box<String>>,
    /// The session of the user that performed the action. Not all events will populate this attribute.
    #[serde(rename = "session_id", skip_serializing_if = "Option::is_none")]
    pub session_id: Option<String>,
    #[serde(rename = "source", skip_serializing_if = "Option::is_none")]
    pub source: Option<Box<crate::models::EventSource>>,
    /// This object provides additional information about the event if available.  This can include how a user performed an event as well as additional information to correlate an event to external KeySafe logs. Not all events have an `additional_details` object.  This object is only available in the Enterprise Events.
    #[serde(rename = "additional_details", skip_serializing_if = "Option::is_none")]
    pub additional_details: Option<serde_json::Value>,
}

impl Event {
    /// The description of an event that happened within Box
    pub fn new() -> Event {
        Event {
            r#type: None,
            created_at: None,
            recorded_at: None,
            event_id: None,
            created_by: None,
            event_type: None,
            session_id: None,
            source: None,
            additional_details: None,
        }
    }
}


