/*
 * Box Platform API
 *
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 * Generated by: https://openapi-generator.tech
 */

/// ShieldInformationBarrierSegmentRestrictionMini : A mini representation of a segment restriction object for the shield information barrier



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ShieldInformationBarrierSegmentRestrictionMini {
    /// Shield information barrier segment restriction
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<RHashType>,
    /// The unique identifier for the shield information barrier segment restriction.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "shield_information_barrier_segment")]
    pub shield_information_barrier_segment: Box<crate::models::ShieldInformationBarrierSegmentRestrictionMiniAllOfShieldInformationBarrierSegment>,
    #[serde(rename = "restricted_segment")]
    pub restricted_segment: Box<crate::models::ShieldInformationBarrierSegmentRestrictionMiniAllOfRestrictedSegment>,
}

impl ShieldInformationBarrierSegmentRestrictionMini {
    /// A mini representation of a segment restriction object for the shield information barrier
    pub fn new(shield_information_barrier_segment: crate::models::ShieldInformationBarrierSegmentRestrictionMiniAllOfShieldInformationBarrierSegment, restricted_segment: crate::models::ShieldInformationBarrierSegmentRestrictionMiniAllOfRestrictedSegment) -> ShieldInformationBarrierSegmentRestrictionMini {
        ShieldInformationBarrierSegmentRestrictionMini {
            r#type: None,
            id: None,
            shield_information_barrier_segment: Box::new(shield_information_barrier_segment),
            restricted_segment: Box::new(restricted_segment),
        }
    }
}

/// Shield information barrier segment restriction
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RHashType {
    #[serde(rename = "shield_information_barrier_segment_restriction")]
    ShieldInformationBarrierSegmentRestriction,
}

impl Default for RHashType {
    fn default() -> RHashType {
        Self::ShieldInformationBarrierSegmentRestriction
    }
}

