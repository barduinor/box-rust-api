/*
 * Box Platform API
 *
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 * Generated by: https://openapi-generator.tech
 */

/// RealtimeServer : A real-time server that can be used for long polling user events



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct RealtimeServer {
    /// `realtime_server`
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<String>,
    /// The URL for the server.
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    /// The time in minutes for which this server is available
    #[serde(rename = "ttl", skip_serializing_if = "Option::is_none")]
    pub ttl: Option<i32>,
    /// The maximum number of retries this server will allow before a new long poll should be started by getting a [new list of server](#options-events).
    #[serde(rename = "max_retries", skip_serializing_if = "Option::is_none")]
    pub max_retries: Option<i32>,
    /// The maximum number of seconds without a response after which you should retry the long poll connection.  This helps to overcome network issues where the long poll looks to be working but no packages are coming through.
    #[serde(rename = "retry_timeout", skip_serializing_if = "Option::is_none")]
    pub retry_timeout: Option<i32>,
}

impl RealtimeServer {
    /// A real-time server that can be used for long polling user events
    pub fn new() -> RealtimeServer {
        RealtimeServer {
            r#type: None,
            url: None,
            ttl: None,
            max_retries: None,
            retry_timeout: None,
        }
    }
}


