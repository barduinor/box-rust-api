/*
 * Box Platform API
 *
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 * Generated by: https://openapi-generator.tech
 */

/// SignRequestSigner : The schema for a Signer in a GET Sign Request request body



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct SignRequestSigner {
    /// Email address of the signer
    #[serde(rename = "email")]
    pub email: String,
    /// Defines the role of the signer in the sign request. A `signer` must sign the document and an `approver` must approve the document. A `final_copy_reader` only receives the final signed document and signing log.
    #[serde(rename = "role", skip_serializing_if = "Option::is_none")]
    pub role: Option<Role>,
    /// Used in combination with an embed URL for a sender. After the sender signs, they are redirected to the next `in_person` signer.
    #[serde(rename = "is_in_person", skip_serializing_if = "Option::is_none")]
    pub is_in_person: Option<bool>,
    /// Order of the signer
    #[serde(rename = "order", skip_serializing_if = "Option::is_none")]
    pub order: Option<i32>,
    /// User ID for the signer in an external application responsible for authentication when accessing the embed URL.
    #[serde(rename = "embed_url_external_user_id", skip_serializing_if = "Option::is_none")]
    pub embed_url_external_user_id: Option<String>,
    /// The URL that a signer will be redirected to after signing a document. Defining this URL overrides default or global redirect URL settings for a specific signer. If no declined redirect URL is specified, this URL will be used for decline actions as well.
    #[serde(rename = "redirect_url", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub redirect_url: Option<Option<String>>,
    /// The URL that a signer will be redirect to after declining to sign a document. Defining this URL overrides default or global declined redirect URL settings for a specific signer.
    #[serde(rename = "declined_redirect_url", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub declined_redirect_url: Option<Option<String>>,
    /// If set to true, signer will need to login to a Box account before signing the request. If the signer does not have an existing account, they will have an option to create a free Box account.
    #[serde(rename = "login_required", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub login_required: Option<Option<bool>>,
    /// If set, this phone number is be used to verify the signer via two factor authentication before they are able to sign the document.
    #[serde(rename = "verification_phone_number", skip_serializing_if = "Option::is_none")]
    pub verification_phone_number: Option<String>,
    /// If set, the signer is required to enter the password before they are able to sign a document. This field is write only.
    #[serde(rename = "password", skip_serializing_if = "Option::is_none")]
    pub password: Option<String>,
    /// Set to `true` if the signer views the document
    #[serde(rename = "has_viewed_document", skip_serializing_if = "Option::is_none")]
    pub has_viewed_document: Option<bool>,
    #[serde(rename = "signer_decision", skip_serializing_if = "Option::is_none")]
    pub signer_decision: Option<Box<crate::models::SignRequestSignerAllOfSignerDecision>>,
    #[serde(rename = "inputs", skip_serializing_if = "Option::is_none")]
    pub inputs: Option<Vec<crate::models::SignRequestSignerInput>>,
    /// URL to direct a signer to for signing
    #[serde(rename = "embed_url", skip_serializing_if = "Option::is_none")]
    pub embed_url: Option<String>,
}

impl SignRequestSigner {
    /// The schema for a Signer in a GET Sign Request request body
    pub fn new(email: String) -> SignRequestSigner {
        SignRequestSigner {
            email,
            role: None,
            is_in_person: None,
            order: None,
            embed_url_external_user_id: None,
            redirect_url: None,
            declined_redirect_url: None,
            login_required: None,
            verification_phone_number: None,
            password: None,
            has_viewed_document: None,
            signer_decision: None,
            inputs: None,
            embed_url: None,
        }
    }
}

/// Defines the role of the signer in the sign request. A `signer` must sign the document and an `approver` must approve the document. A `final_copy_reader` only receives the final signed document and signing log.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Role {
    #[serde(rename = "signer")]
    Signer,
    #[serde(rename = "approver")]
    Approver,
    #[serde(rename = "final_copy_reader")]
    FinalCopyReader,
}

impl Default for Role {
    fn default() -> Role {
        Self::Signer
    }
}

